!function(e){"use strict";const t=e.vm.runtime,r=t.renderer,n=e.Cast;var s=[],o=[];e.extensions.register(new class{constructor(){t.on("PROJECT_START",(()=>{this._refreshTargets()})),t.on("PROJECT_STOP_ALL",(()=>{this._refreshTargets()}))}getInfo(){return{id:"mistSkins",name:"Skins",color1:"#ff69b4",color2:"#ff5cae",color3:"#ff4fa8",docsURI:"https://extensions.turbowarp.org/Lily/Skins",blocks:[{opcode:"registerSVGSkin",blockType:e.BlockType.COMMAND,text:"create SVG skin [SVG] as [NAME]",arguments:{SVG:{type:e.ArgumentType.STRING,defaultValue:"<svg />"},NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},"---",{opcode:"registerCostumeSkin",blockType:e.BlockType.COMMAND,text:"load skin from [COSTUME] as [NAME]",arguments:{COSTUME:{type:e.ArgumentType.COSTUME},NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},{opcode:"registerURLSkin",blockType:e.BlockType.COMMAND,text:"load skin from URL [URL] as [NAME]",arguments:{URL:{type:e.ArgumentType.STRING,defaultValue:"https://extensions.turbowarp.org/dango.png"},NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},{opcode:"getSkinLoaded",blockType:e.BlockType.BOOLEAN,text:"skin [NAME] is loaded?",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},{opcode:"getSkinLoading",blockType:e.BlockType.BOOLEAN,text:"skin [NAME] is loading?",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},{opcode:"getSkins",blockType:e.BlockType.REPORTER,text:"get all skins"},"---",{opcode:"setSkin",blockType:e.BlockType.COMMAND,text:"set skin of [TARGET] to [NAME]",arguments:{TARGET:{type:e.ArgumentType.STRING,menu:"targetMenu"},NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},{opcode:"restoreSkin",blockType:e.BlockType.COMMAND,text:"restore skin of [TARGET]",arguments:{TARGET:{type:e.ArgumentType.STRING,menu:"targetMenu"}}},{opcode:"restoreTargets",blockType:e.BlockType.COMMAND,text:"restore targets with skin [NAME]",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},"---",{opcode:"getCurrentSkin",blockType:e.BlockType.REPORTER,text:"current skin of [TARGET]",arguments:{TARGET:{type:e.ArgumentType.STRING,menu:"targetMenu"}}},{opcode:"getSkinAttribute",blockType:e.BlockType.REPORTER,text:"[ATTRIBUTE] of skin [NAME]",arguments:{ATTRIBUTE:{type:e.ArgumentType.STRING,menu:"skinAttributes"},NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},"---",{opcode:"deleteSkin",blockType:e.BlockType.COMMAND,text:"delete skin [NAME]",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"my skin"}}},{opcode:"deleteAllSkins",blockType:e.BlockType.COMMAND,text:"delete all skins"}],menus:{targetMenu:{acceptReporters:!0,items:"_getTargets"},skinAttributes:{acceptReporters:!0,items:[{text:"width",value:"width"},{text:"height",value:"height"}]}}}}async registerSVGSkin(e){const t=`lms-${n.toString(e.NAME)}`,o=n.toString(e.SVG);let a=null;s[t]&&(a=s[t]);const i=r.createSVGSkin(o);var l;s[t]=i,await(l=r._allSkins[i],new Promise((e=>{l._svgImageLoaded?e():(l._svgImage.addEventListener("load",(()=>{e()})),l._svgImage.addEventListener("error",(()=>{e()})))}))),a&&(this._refreshTargetsFromID(a,!1,i),r.destroySkin(a))}async registerCostumeSkin(t,o){if("add costume skin",e.vm.runtime.isPackaged&&(alert('To use the Skins add costume skin block, the creator of the packaged project must uncheck "Remove raw asset data after loading to save RAM" under advanced settings in the packager.'),1))return;const a=`lms-${n.toString(t.NAME)}`,i=o.target.getCostumeIndexByName(t.COSTUME);if(-1===i)return;const l=o.target.sprite.costumes[i],g=l.asset.encodeDataURI(),c=l.rotationCenterX,u=l.rotationCenterY;let T=[c,u];c&&u||(T=null);let k=null;s[a]&&(k=s[a]);const m=await this._createURLSkin(g,T);s[a]=m,k&&(this._refreshTargetsFromID(k,!1,m),r.destroySkin(k))}registerURLSkin(e){const t=`lms-${n.toString(e.NAME)}`,a=n.toString(e.URL);let i=null;s[t]&&(i=s[t]),o.push(t),this._createURLSkin(a).then((e=>{o=o.filter((e=>e!==t)),e&&(s[t]=e,i&&(this._refreshTargetsFromID(i,!1,e),r.destroySkin(i)))}))}getSkinLoaded(e){const t=`lms-${n.toString(e.NAME)}`;return!!s[t]}getSkinLoading(e){const t=`lms-${n.toString(e.NAME)}`;return o.includes(t)}getSkins(){return JSON.stringify(Object.keys(s).map((e=>e.replace(/^lms\-/,""))))}setSkin(e,t){const o=`lms-${n.toString(e.NAME)}`;if(!s[o])return;const a=n.toString(e.TARGET),i=this._getTargetFromMenu(a,t);if(!i)return;const l=i.drawableID,g=s[o];r._allDrawables[l].skin=r._allSkins[g]}restoreSkin(e,t){const r=n.toString(e.TARGET),s=this._getTargetFromMenu(r,t);s&&s.updateAllDrawableProperties()}getCurrentSkin(e,t){const s=n.toString(e.TARGET),o=this._getTargetFromMenu(s,t);if(!o)return;const a=o.drawableID,i=r._allDrawables[a].skin._id,l=this._getSkinNameFromID(i);return l?l.replace("lms-",""):""}getSkinAttribute(e){const t=r._allSkins,o=`lms-${n.toString(e.NAME)}`;if(!s[o])return 0;const a=s[o];if(!t[a])return 0;const i=t[a].size;switch(n.toString(e.ATTRIBUTE).toLowerCase()){case"width":return Math.ceil(i[0]);case"height":return Math.ceil(i[1]);default:return 0}}deleteSkin(e){const t=`lms-${n.toString(e.NAME)}`;if(!s[t])return;const o=s[t];this._refreshTargetsFromID(o,!0),r.destroySkin(o),Reflect.deleteProperty(s,t)}deleteAllSkins(){this._refreshTargets();for(const e in s){const t=s[e];r.destroySkin(t),Reflect.deleteProperty(s,e)}o=[],s=[]}restoreTargets(e){const t=`lms-${n.toString(e.NAME)}`;if(!s[t])return;const r=s[t];this._refreshTargetsFromID(r,!0)}_refreshTargetsFromID(e,n,s){const o=r._allDrawables,a=r._allSkins;for(const r of t.targets){const t=r.drawableID;o[t].skin.id===e&&(r.updateAllDrawableProperties(),n||(o[t].skin=s?a[s]:a[e]))}}_refreshTargets(){for(const e of t.targets)e.updateAllDrawableProperties()}_getSkinNameFromID(e){for(const t in s)if(s[t]===e)return t}_getTargetFromMenu(r,n){let s=e.vm.runtime.getSpriteTargetByName(r);return"_myself_"===r&&(s=n.target),"_stage_"===r&&(s=t.getTargetForStage()),s}async _createURLSkin(t,n){let s;if(!await e.canFetch(t))return;s=await e.fetch(t);const o=s.headers.get("Content-Type");if("image/svg+xml"===o)return r.createSVGSkin(await s.text(),n);if("image/png"===o||"image/jpeg"===o||"image/bmp"===o){const e=new Image;return e.src=t,e.crossOrigin="anonymous",await e.decode(),r.createBitmapSkin(e)}}_getTargets(){const t=[{text:"myself",value:"_myself_"},{text:"Stage",value:"_stage_"}],r=e.vm.runtime.targets;for(let e=1;e<r.length;e++){const n=r[e];if(n.isOriginal){const e=n.getName();t.push({text:e,value:e})}}return t}})}(Scratch);
