// Name: RegExp
// ID: truefantomregexp
// Description: Full interface for working with Regular Expressions.
// By: TrueFantom <https://scratch.mit.edu/users/TrueFantom/>
// License: MIT
// Context: RegExp is short for "Regular Expression", a sort of programming language. This extension uses [IMAGE] to indicate that the following input should contain a regular expression.

(e=>{"use strict";const t=e.Cast,r=e=>JSON.stringify(e,((e,t)=>void 0===t?"":t),0),a=e=>{let t=/\/(.*)\/(.*)/.exec(e);return new RegExp(t[1],t[2])},l=e=>String(e),n=(e,t)=>{let r=/\/(.*)\/(.*)/.exec(t);return l(e)==="/"+r[1]+"/"+Array.from(r[2]).sort().join("")};e.extensions.register(new class{getInfo(){return{id:"truefantomregexp",name:e.translate("RegExp"),color1:"#e6282a",blocks:[{opcode:"is_regexp_block",blockType:e.BlockType.BOOLEAN,text:e.translate("is [A] a regular expression?"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"}}},"---",{opcode:"regexp_equal_block",blockType:e.BlockType.BOOLEAN,text:e.translate("[A] = [B]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"},B:{type:e.ArgumentType.STRING,defaultValue:"/apple/ig"}}},"---",{opcode:"regexp_block",blockType:e.BlockType.REPORTER,text:e.translate("regular expression with pattern [A] and flags [B]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"apple"},B:{type:e.ArgumentType.STRING,defaultValue:"gi"}}},{opcode:"regexp_contains_flags_block",blockType:e.BlockType.BOOLEAN,text:e.translate("does [A] contain flags [B]?"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"},B:{type:e.ArgumentType.STRING,defaultValue:"gi"}}},{opcode:"regexp_components_block",blockType:e.BlockType.REPORTER,text:e.translate("[B] of [A]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"},B:{type:e.ArgumentType.STRING,menu:"components_menu"}}},"---",{opcode:"regexp_set_pattern_flags_block",blockType:e.BlockType.REPORTER,text:e.translate("set [B] of [A] to [C]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"},B:{type:e.ArgumentType.STRING,menu:"components_menu"},C:{type:e.ArgumentType.STRING,defaultValue:"banana"}}},{opcode:"regexp_add_flags_block",blockType:e.BlockType.REPORTER,text:e.translate("add flags [B] to [A]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"},B:{type:e.ArgumentType.STRING,defaultValue:"gi"}}},{opcode:"regexp_delete_flags_block",blockType:e.BlockType.REPORTER,text:e.translate("delete flags [B] from [A]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"},B:{type:e.ArgumentType.STRING,defaultValue:"gi"}}},"---",{opcode:"regexp_test_block",blockType:e.BlockType.BOOLEAN,text:e.translate("does [A] match [B]?"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"apple"},B:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"}}},{opcode:"regexp_replace_block",blockType:e.BlockType.REPORTER,text:e.translate("replace matches of [A] with [B] to [C]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"apple"},B:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"},C:{type:e.ArgumentType.STRING,defaultValue:"banana"}}},{opcode:"regexp_split_block",blockType:e.BlockType.REPORTER,text:e.translate("JSON of [A] split by matches with [B]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"apple"},B:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"}}},{opcode:"regexp_match_block",blockType:e.BlockType.REPORTER,text:e.translate("JSON of match [C] of [A] with [B]"),arguments:{A:{type:e.ArgumentType.STRING,defaultValue:"apple"},B:{type:e.ArgumentType.STRING,defaultValue:"/apple/gi"},C:{type:e.ArgumentType.STRING,menu:"match_menu"}}}],menus:{components_menu:{acceptReporters:!1,items:[{text:e.translate("pattern"),value:"pattern"},{text:e.translate("flags"),value:"flags"}]},match_menu:{acceptReporters:!1,items:[{text:e.translate("values"),value:"values"},{text:e.translate("keys"),value:"keys"},{text:e.translate("pairs"),value:"pairs"},{text:e.translate({default:"map",description:"This is the computer science kind of map."}),value:"map"}]}}}}is_regexp_block({A:e}){try{let r=t.toString(e),l=a(r);return n(l,r)}catch(e){return!1}}regexp_equal_block({A:e,B:r}){try{let l=t.toString(e),p=a(l),o=t.toString(r),u=a(o);return!(!n(p,l)||!n(u,o))&&(p.source===u.source&&p.flags===u.flags)}catch(e){return!1}}regexp_block({A:e,B:r}){try{return l(new RegExp(t.toString(e),t.toString(r)))}catch(e){return""}}regexp_contains_flags_block({A:e,B:r}){try{let l=t.toString(e),p=a(l);if(n(p,l)){let e=!0,a=Array.from(p.flags);return Array.from(t.toString(r)).forEach((t=>a.includes(t)?a.splice(a.indexOf(t),1):e=!1)),e}return!1}catch(e){return!1}}regexp_components_block({A:e,B:r}){try{let l=t.toString(e),p=a(l);if(n(p,l)){switch(t.toString(r).toLowerCase()){case"pattern":return p.source;case"flags":return p.flags}}return""}catch(e){return""}}regexp_set_pattern_flags_block({A:e,B:r,C:p}){try{let o=t.toString(e),u=a(o);if(n(u,o)){switch(t.toString(r).toLowerCase()){case"pattern":return l(new RegExp(t.toString(p),u.flags));case"flags":return l(new RegExp(u.source,t.toString(p)))}}return""}catch(e){return""}}regexp_add_flags_block({A:e,B:r}){try{let p=t.toString(e),o=a(p);if(n(o,p)){new RegExp("test",t.toString(r));let e=Array.from(o.flags);return Array.from(t.toString(r)).forEach((t=>e.includes(t)?void 0:e.push(t))),l(new RegExp(o.source,e.join("")))}return""}catch(e){return""}}regexp_delete_flags_block({A:e,B:r}){try{let p=t.toString(e),o=a(p);if(n(o,p)){new RegExp("test",t.toString(r));let e=Array.from(o.flags);return Array.from(t.toString(r)).forEach((t=>e.includes(t)?e.splice(e.indexOf(t),1):void 0)),l(new RegExp(o.source,e.join("")))}return""}catch(e){return""}}regexp_test_block({A:e,B:r}){try{let l=t.toString(r),p=a(l);return!!n(p,l)&&p.test(t.toString(e))}catch(e){return!1}}regexp_replace_block({A:e,B:r,C:l}){try{let p=t.toString(r),o=a(p);return n(o,p)?t.toString(e).replace(o,t.toString(l)):""}catch(e){return""}}regexp_split_block({A:e,B:l}){try{let p=t.toString(l),o=a(p);return n(o,p)?r(t.toString(e).split(o)||[]):""}catch(e){return""}}regexp_match_block({A:e,B:l,C:p}){try{let o=t.toString(l),u=a(o),c=t.toString(e);if(n(u,o)){const e=u.global?u:new RegExp(u.source,u.flags+"g");let a;switch(t.toString(p).toLowerCase()){case"values":return a=Array.from(c.matchAll(e)).map((e=>e[0])),r(u.global?a:a[0]?[a[0]]:[]);case"keys":return a=Array.from(c.matchAll(e)).map((e=>String(e.index+1))),r(u.global?a:a[0]?[a[0]]:[]);case"pairs":return a=Array.from(c.matchAll(e)).reduce(((e,t)=>(e[t.index+1]=t[0],e)),{}),r(u.global?a:Object.keys(a)[0]?{[Object.keys(a)[0]]:Object.values(a)[0]}:{});case"map":return a=Array.from(c.matchAll(e)).map((e=>[String(e.index+1),e[0]])),r(u.global?a:a[0]?[a[0]]:[])}}return""}catch(e){return""}}})})(Scratch);