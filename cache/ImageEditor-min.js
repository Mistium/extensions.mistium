// This extension by Sharkpool has been minified and modified by "Mistium" to remove code that goes unused within originOS
// DO NOT USE THIS
// Go here: https://sharkpool-sp.github.io/SharkPools-Extensions/

!function(e){"use strict";if(!e.extensions.unsandboxed)throw new Error("Image Editor must run unsandboxed!");const t=e.vm,a=t.runtime;let o={};const i=["SPimgEditor_pixelHex","SPimgEditor_pixelIndex","SPimgEditor_setPixel"];function n(){if(!window.ScratchBlocks)return;t.removeListener("EXTENSION_ADDED",n),t.removeListener("BLOCKSINFO_UPDATE",n);const e=ScratchBlocks.scratchBlocksUtils.isShadowArgumentReporter;ScratchBlocks.scratchBlocksUtils.isShadowArgumentReporter=function(t){return!!e(t)||t.isShadow()&&i.includes(t.type)}}t.on("EXTENSION_ADDED",n),t.on("BLOCKSINFO_UPDATE",n),n();e.extensions.register(new class{getInfo(){return{id:"SPimgEditor",name:"Image Editor",color1:"#4756b3",color2:"#1f254d",color3:"#333d80",blocks:[{func:"rectExts",blockType:e.BlockType.BUTTON,text:"Recommended Extensions"},{blockType:e.BlockType.LABEL,text:"Image Bank"},{opcode:"makeImg",blockType:e.BlockType.COMMAND,text:"make new image named [NAME] width [W] height [H] fill [COLOR]",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"},W:{type:e.ArgumentType.NUMBER,defaultValue:100},H:{type:e.ArgumentType.NUMBER,defaultValue:100},COLOR:{type:e.ArgumentType.COLOR}}},{opcode:"modifyImg",blockType:e.BlockType.COMMAND,text:"[TYPE] image named [NAME] to width [W] height [H] fill [COLOR]",arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"MOD_TYPE"},NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"},W:{type:e.ArgumentType.NUMBER,defaultValue:200},H:{type:e.ArgumentType.NUMBER,defaultValue:200},COLOR:{type:e.ArgumentType.COLOR}}},{opcode:"imgAtts",blockType:e.BlockType.REPORTER,text:"[TYPE] of image named [NAME] ",arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"IMG_ATTS"},NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"}}},"---",{opcode:"imgExists",blockType:e.BlockType.BOOLEAN,text:"image named [NAME] exists?",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"}}},{opcode:"allImgs",blockType:e.BlockType.REPORTER,text:"all images"},{opcode:"deleteImg",blockType:e.BlockType.COMMAND,text:"delete image named [NAME]",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"}}},{opcode:"deleteAllImgs",blockType:e.BlockType.COMMAND,text:"delete all images"},{blockType:e.BlockType.LABEL,text:"Image Editing"},{opcode:"setHex",blockType:e.BlockType.COMMAND,text:"set pixel # [INDEX] to [COLOR] in image [NAME]",arguments:{INDEX:{type:e.ArgumentType.NUMBER,defaultValue:1},COLOR:{type:e.ArgumentType.COLOR},NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"}}},{opcode:"getHex",blockType:e.BlockType.REPORTER,text:"get pixel # [INDEX] in image [NAME]",arguments:{INDEX:{type:e.ArgumentType.NUMBER,defaultValue:1},NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"}}},"---",{opcode:"rotateImg",blockType:e.BlockType.COMMAND,text:"point image named [NAME] in direction [DIR] fill [COLOR]",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"},DIR:{type:e.ArgumentType.ANGLE,defaultValue:90},COLOR:{type:e.ArgumentType.COLOR}}},{opcode:"addTexture",blockType:e.BlockType.COMMAND,text:"add texture [IMAGE] to image [NAME] at x [x] y [y]",arguments:{IMAGE:{type:e.ArgumentType.STRING,defaultValue:"https://extensions.turbowarp.org/dango.png"},NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"},x:{type:e.ArgumentType.NUMBER,defaultValue:0},y:{type:e.ArgumentType.NUMBER,defaultValue:0}}},"---",{opcode:"onEditCall",blockType:e.BlockType.HAT,isEdgeActivated:!1,hideFromPalette:!0,text:"on [NAME] editor call pixel [PIXEL] [INDEX]",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"},PIXEL:{},INDEX:{}}},{opcode:"editLoop",blockType:e.BlockType.LOOP,hideFromPalette:!0,text:"for each pixel [PIXEL] [INDEX] in [NAME]",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"},PIXEL:{},INDEX:{}}},{opcode:"pixelHex",blockType:e.BlockType.REPORTER,hideFromPalette:!0,text:"hex"},{opcode:"pixelIndex",blockType:e.BlockType.REPORTER,hideFromPalette:!0,text:"index"},{opcode:"setPixel",blockType:e.BlockType.COMMAND,isTerminal:!0,hideFromPalette:!0,text:"set this pixel to [COLOR]",arguments:{COLOR:{type:e.ArgumentType.COLOR}}},{blockType:e.BlockType.XML,xml:'\n <block type="SPimgEditor_editLoop">\n <value name="NAME"><shadow type="text"><field name="TEXT">image-1</field></shadow></value>\n <value name="PIXEL"><shadow type="SPimgEditor_pixelHex"></shadow></value>\n <value name="INDEX"><shadow type="SPimgEditor_pixelIndex"></shadow></value>\n </block>\n <sep gap="36"/>\n <block type="SPimgEditor_onEditCall">\n <value name="NAME"><shadow type="text"><field name="TEXT">image-1</field></shadow></value>\n <value name="PIXEL"><shadow type="SPimgEditor_pixelHex"></shadow></value>\n <value name="INDEX"><shadow type="SPimgEditor_pixelIndex"></shadow></value>\n <next><block type="SPimgEditor_setPixel">\n <value name="COLOR"><shadow type="colour_picker"></shadow></value>\n </block></next>\n </block>\n '},{opcode:"callImgEdit",blockType:e.BlockType.REPORTER,text:"call image editor for [NAME]",arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:"image-1"}}}],menus:{MOD_TYPE:["expand","stretch"],IMG_ATTS:{acceptReporters:!0,items:["width","height","pixel count","data"]}}}}rectExts(){alert('This Extension works best with the Additional Extensions:\n"Image Effects" and "Color Master"\nThey can be Found at "https://sharkpools-extensions.vercel.app/"')}callEditor(e){let t=[];return a.allScriptsByOpcodeDo("SPimgEditor_onEditCall",((o,i)=>{o.blockId;const n=a._pushThread(o.blockId,i);n.SPimgData=e,t.push(n)})),t}getPixelData(e){const t=e.canvas.width,a=e.canvas.height,o=e.context.getImageData(0,0,t,a).data,i=[];for(let e=0;e<o.length;e+=4){const t=o[e],a=o[e+1],n=o[e+2],l=o[e+3],r=Math.round(l).toString(16).padStart(2,"0");i.push(`#${((1<<24)+(t<<16)+(a<<8)+n).toString(16).slice(1)}${r}`)}return i}pixels2Img(e){const t=e.canvas.width,a=e.canvas.height,o=document.createElement("canvas");o.width=t,o.height=a;const i=o.getContext("2d"),n=i.createImageData(t,a);for(let t=0;t<e.pixels.length;t++){const a=e.pixels[t]??"#000000";n.data[4*t+0]=parseInt(a.substring(1,3),16),n.data[4*t+1]=parseInt(a.substring(3,5),16),n.data[4*t+2]=parseInt(a.substring(5,7),16),n.data[4*t+3]=9===a.length?parseInt(a.substring(7,9),16):255}return i.putImageData(n,0,0),o.toDataURL()}makeImg(t){const a=e.Cast.toNumber(t.W),i=e.Cast.toNumber(t.H),n=document.createElement("canvas");n.width=a,n.height=i;const l=n.getContext("2d");l.fillStyle=t.COLOR,l.fillRect(0,0,a,i),o[t.NAME]={data:n.toDataURL(),canvas:n,context:l,pixels:[]}}modifyImg(t){if(void 0===o[t.NAME])this.makeImg(t);else{const a=e.Cast.toNumber(t.W),i=e.Cast.toNumber(t.H),n=o[t.NAME],l=document.createElement("canvas");l.width=a,l.height=i;const r=l.getContext("2d");if("stretch"===t.TYPE)r.drawImage(n.canvas,0,0,a,i);else{r.fillStyle=t.COLOR,r.fillRect(0,0,a,i);const e=(a-n.canvas.width)/2,o=(i-n.canvas.height)/2;r.drawImage(n.canvas,e,o)}o[t.NAME]={data:l.toDataURL(),canvas:l,context:r,pixels:[]}}}imgAtts(e){const t=o[e.NAME];if(void 0===t)return 0;const a=t.canvas;switch(e.TYPE){case"width":return a.width;case"height":return a.height;case"pixel count":return a.width*a.height;default:return t.data}}imgExists(e){return void 0!==o[e.NAME]}allImgs(){return JSON.stringify(Object.keys(o))}deleteImg(e){delete o[e.NAME]}deleteAllImgs(){o={}}callImgEdit(e,t){const i=o[e.NAME];if(void 0===i)return"";if(void 0!==t.stackFrame.newThreads)return t.stackFrame.newThreads.some((e=>-1!==a.threads.indexOf(e)))&&(t.stackFrame.newThreads.every((e=>a.isWaitingThread(e)))?t.yieldTick():t.yield()),i.data=this.pixels2Img(i),i.data;{i.pixels=this.getPixelData(i);let a=[];for(var n=0;n<i.pixels.length;n++)a=[...a,...this.callEditor({name:e.NAME,index:n,hex:i.pixels[n]})];t.stackFrame.newThreads=a,t.yield()}}editLoop(e,t){const a=o[e.NAME];if(void 0===a)return"";void 0===t.stackFrame.loopCounter&&(a.pixels=this.getPixelData(a),t.stackFrame.loopCounter=a.pixels.length);const i=Math.abs(t.stackFrame.loopCounter-a.pixels.length);t.thread.SPimgData={name:e.NAME,index:i,hex:a.pixels[i]},t.stackFrame.loopCounter--,t.stackFrame.loopCounter>=0?t.startBranch(1,!0):(a.data=this.pixels2Img(a),delete t.thread.SPimgData)}onEditCall(e,t){return t.thread.SPimgData?.name===e.NAME}pixelHex(e,t){return t.thread.SPimgData?.hex||""}pixelIndex(e,t){return t.thread.SPimgData?.index+1||""}setPixel(e,t){const a=t.thread.SPimgData;void 0!==a&&(this.setHex({REFRESH:!1,NAME:a.name,COLOR:e.COLOR,INDEX:a.index+1}),t.thread.stopThisScript())}setHex(t){const a=o[t.NAME];if(void 0===a)return"";0===a.pixels.length&&(a.pixels=this.getPixelData(a)),a.pixels[e.Cast.toNumber(t.INDEX)-1]=t.COLOR,void 0===t.REFRESH&&(a.data=this.pixels2Img(a))}getHex(t){const a=o[t.NAME];return void 0===a?"":(0===a.pixels.length&&(a.pixels=this.getPixelData(a)),a.pixels[e.Cast.toNumber(t.INDEX)-1]||"")}rotateImg(t){if(void 0===o[t.NAME])this.makeImg(t);else{const a=o[t.NAME],i=a.canvas,n=a.context,l=document.createElement("canvas");l.width=i.width,l.height=i.height;l.getContext("2d").drawImage(i,0,0),n.clearRect(0,0,i.width,i.height),n.fillStyle=t.COLOR,n.fillRect(0,0,i.width,i.height),n.save(),n.translate(i.width/2,i.height/2),n.rotate(e.Cast.toNumber(t.DIR)*(Math.PI/180)),n.drawImage(l,-l.width/2,-l.height/2),n.restore(),o[t.NAME]={data:i.toDataURL(),canvas:i,context:n,pixels:[]}}}addTexture(t){return new Promise((a=>{const i=o[t.NAME];if(void 0===i||!t.IMAGE)return a();const n=new Image;n.crossOrigin="Anonymous",n.onload=()=>{try{const o=(i.canvas.width-n.width)/2,l=(i.canvas.height-n.height)/2;i.context.drawImage(n,e.Cast.toNumber(t.x)+o,-1*e.Cast.toNumber(t.y)+l),i.data=i.canvas.toDataURL(),a()}catch(e){console.error(e),a(new Error("Failed to apply texture. Image may be tainted"))}},n.onerror=e=>{console.error(e)},n.src=t.IMAGE}))}})}(Scratch);
