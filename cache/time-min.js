// Name: Time
// ID: sipctime
// Description: Blocks for times, dates, and time zones.
// By: -SIPC-
// By: SharkPool <https://scratch.mit.edu/users/DemonX5/>
// License: MIT

// If you're curious, the default dates are from the first commits of forkphorus & TurboWarp:
// https://github.com/forkphorus/forkphorus/commit/632d3432a8a98abd627b1309f6c85f47dcc6d428
// https://github.com/TurboWarp/scratch-vm/commit/4a93dab4fa3704ab7a1374b9794026b3330f3433

!function(e){"use strict";const t=t=>isNaN(t)?new Date(e.Cast.toString(t)):new Date(e.Cast.toNumber(t));e.extensions.register(new class{getInfo(){return{id:"sipctime",name:e.translate("Time"),color1:"#ff8000",color2:"#804000",color3:"#804000",blocks:[{opcode:"Timestamp",blockType:e.BlockType.REPORTER,text:e.translate("current timestamp")},{opcode:"timezone",blockType:e.BlockType.REPORTER,text:e.translate("current time zone")},{opcode:"Timedata",blockType:e.BlockType.REPORTER,text:"[Timedata] from [timestamp]",arguments:{timestamp:{type:e.ArgumentType.NUMBER,defaultValue:"1591657163000"},Timedata:{type:e.ArgumentType.STRING,menu:"Time"}}},{opcode:"TimestampToTime",blockType:e.BlockType.REPORTER,text:"convert [timestamp] to YYYY-MM-DD HH:MM:SS",arguments:{timestamp:{type:e.ArgumentType.NUMBER,defaultValue:"1591657163000"}}},{opcode:"TimeToTimestamp",blockType:e.BlockType.REPORTER,text:"convert [time] to timestamp",arguments:{time:{type:e.ArgumentType.STRING,defaultValue:"2020-06-08 17:59:23"}}},"---",{opcode:"differenceBetweenDateAndNow",blockType:e.BlockType.REPORTER,text:"difference between [DATE] and now in [TIME_MENU]",arguments:{DATE:{type:e.ArgumentType.STRING,defaultValue:"2020-06-08 17:59:23"},TIME_MENU:{type:e.ArgumentType.STRING,menu:"DurationUnit"}}},{opcode:"differenceBetweenDates",blockType:e.BlockType.REPORTER,text:"difference between [START] and [END] in [TIME_MENU]",arguments:{START:{type:e.ArgumentType.STRING,defaultValue:"2019-01-04 18:41:04"},END:{type:e.ArgumentType.STRING,defaultValue:"2020-06-08 17:59:23"},TIME_MENU:{type:e.ArgumentType.STRING,menu:"DurationUnit"}}},"---",{opcode:"formatTime",blockType:e.BlockType.REPORTER,text:"format [VALUE] seconds as [ROUND] time",arguments:{VALUE:{type:e.ArgumentType.NUMBER,defaultValue:"3883.2"},ROUND:{type:e.ArgumentType.NUMBER,menu:"TimeFormat"}}},{opcode:"daysInMonth",blockType:e.BlockType.REPORTER,text:"number of days in [MONTH] [YEAR]",arguments:{MONTH:{type:e.ArgumentType.STRING,menu:"Months"},YEAR:{type:e.ArgumentType.NUMBER,defaultValue:"2000"}}}],menus:{Time:{acceptReporters:!0,items:[{text:"year",value:"year"},{text:"month",value:"month"},{text:"day",value:"day"},{text:"hour",value:"hour"},{text:"minute",value:"minute"},{text:"second",value:"second"}]},DurationUnit:{acceptReporters:!0,items:[{text:"years",value:"years"},{text:"months",value:"months"},{text:"days",value:"days"},{text:"hours",value:"hours"},{text:"minutes",value:"minutes"},{text:"seconds",value:"seconds"}]},TimeFormat:{acceptReporters:!0,items:[{text:"rounded",value:"rounded"},{text:"exact",value:"exact"}]},Months:{acceptReporters:!0,items:[{text:"January",value:"1"},{text:"February",value:"2"},{text:"March",value:"3"},{text:"April",value:"4"},{text:"May",value:"5"},{text:"June",value:"6"},{text:"July",value:"7"},{text:"August",value:"8"},{text:"September",value:"9"},{text:"October",value:"10"},{text:"November",value:"11"},{text:"December",value:"12"}]}}}}Timestamp(){return Date.now()}timezone(){return"UTC+"+(new Date).getTimezoneOffset()/-60}Timedata(e){const a=t(e.timestamp);switch(e.Timedata){case"year":return a.getFullYear();case"month":return a.getMonth()+1<10?"0"+(a.getMonth()+1):a.getMonth()+1;case"day":return a.getDate()<10?"0"+a.getDate():a.getDate();case"hour":return a.getHours()<10?"0"+a.getHours():a.getHours();case"minute":return a.getMinutes()<10?"0"+a.getMinutes():a.getMinutes();case"second":return a.getSeconds()<10?"0"+a.getSeconds():a.getSeconds()}return 0}TimestampToTime({timestamp:e}){const a=t(e);return`${a.getFullYear()}-${a.getMonth()+1<10?"0"+(a.getMonth()+1):a.getMonth()+1}-${a.getDate()<10?"0"+a.getDate():a.getDate()} ${a.getHours()<10?"0"+a.getHours():a.getHours()}:${a.getMinutes()<10?"0"+a.getMinutes():a.getMinutes()}:${a.getSeconds()<10?"0"+a.getSeconds():a.getSeconds()}`}TimeToTimestamp({time:e}){return t(e).getTime()}_calculateTimeDifference(t,a,n){const r=a.getTime()-t.getTime();switch(e.Cast.toString(n)){case"years":return r/31536e6;case"months":return r/2629746e3;case"days":return r/864e5;case"hours":return r/36e5;case"minutes":return r/6e4;case"seconds":return r/1e3;default:return 0}}differenceBetweenDateAndNow(e){return this._calculateTimeDifference(t(e.DATE),new Date,e.TIME_MENU)}differenceBetweenDates(e){return this._calculateTimeDifference(t(e.START),t(e.END),e.TIME_MENU)}formatTime(t){const a=e.Cast.toNumber(t.VALUE),n="rounded"===t.ROUND?Math.round(a%60).toString().padStart(2,"0"):(a%60).toFixed(3).padStart(6,"0"),r=Math.floor(a/60%60).toString().padStart(2,"0");return`${Math.floor(a/3600).toString().padStart(2,"0")}:${r}:${n}`}daysInMonth(t){const a=Math.round(e.Cast.toNumber(t.YEAR));if(a<=0)return 0;const n=Math.round(e.Cast.toNumber(t.MONTH));if(n<0||n>=13)return 0;return new Date(a,n,0).getDate()}})}(Scratch);