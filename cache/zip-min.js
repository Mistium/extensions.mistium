// Name: Zip
// ID: cst1229zip
// Description: Create and edit .zip format files, including .sb3 files.
// By: CST1229 <https://scratch.mit.edu/users/CST1229/>
// License: MIT AND LGPL-3.0

!function(t){"use strict";const e=t.vm.exports.JSZip;t.extensions.register(new class{constructor(){this.zips=Object.create(null),this.zipPaths=Object.create(null),this.zip=null,t.vm.runtime.ext_cst1229zip=this,this.zipError=!1,t.vm.runtime.on("RUNTIME_DISPOSED",(()=>{this.closeAll(),this.zipError=!1}))}getInfo(){return{id:"cst1229zip",name:"Zip",docsURI:"https://extensions.turbowarp.org/CST1229/zip",color1:"#a49a3a",color2:"#7d7d23",color3:"#666600",blocks:[{opcode:"createEmptyAs",blockType:t.BlockType.COMMAND,text:"create empty archive named [NAME]",arguments:{NAME:{type:t.ArgumentType.STRING,defaultValue:"archive"}}},{opcode:"openAs",blockType:t.BlockType.COMMAND,text:"open archive from zip [TYPE] [DATA] named [NAME]",arguments:{TYPE:{type:t.ArgumentType.STRING,defaultValue:"URL",menu:"fileType"},DATA:{type:t.ArgumentType.STRING,defaultValue:"https://extensions.turbowarp.org/hello.zip"},NAME:{type:t.ArgumentType.STRING,defaultValue:"archive"}}},{hideFromPalette:!0,opcode:"createEmpty",blockType:t.BlockType.COMMAND,text:'create empty archive named "archive"',arguments:{}},{hideFromPalette:!0,opcode:"open",blockType:t.BlockType.COMMAND,text:'open zip from [TYPE] [DATA] named "archive"',arguments:{TYPE:{type:t.ArgumentType.STRING,defaultValue:"URL",menu:"fileType"},DATA:{type:t.ArgumentType.STRING,defaultValue:"https://extensions.turbowarp.org/hello.zip"}}},{opcode:"getZip",blockType:t.BlockType.REPORTER,text:"output zip type [TYPE] compression level [COMPRESSION]",arguments:{TYPE:{type:t.ArgumentType.STRING,defaultValue:"data: URL",menu:"zipFileType"},COMPRESSION:{type:t.ArgumentType.NUMBER,defaultValue:"6",menu:"compressionLevel"}}},{opcode:"close",blockType:t.BlockType.COMMAND,text:"remove current archive",arguments:{}},{opcode:"isOpen",blockType:t.BlockType.BOOLEAN,text:"archive is open?",arguments:{}},{opcode:"isError",blockType:t.BlockType.BOOLEAN,text:"error opening archive?",arguments:{}},"---",{opcode:"currentArchive",blockType:t.BlockType.REPORTER,text:"current archive name",arguments:{}},{opcode:"listArchives",blockType:t.BlockType.REPORTER,text:"currently open archives",arguments:{}},{opcode:"goToArchive",blockType:t.BlockType.COMMAND,text:"switch to archive named [NAME]",arguments:{NAME:{type:t.ArgumentType.STRING,defaultValue:"other archive"}}},{opcode:"closeAll",blockType:t.BlockType.COMMAND,text:"remove all archives",arguments:{}},"---",{opcode:"exists",blockType:t.BlockType.BOOLEAN,text:"[OBJECT] exists?",arguments:{OBJECT:{type:t.ArgumentType.STRING,defaultValue:"folder/"}}},{opcode:"writeFile",blockType:t.BlockType.COMMAND,text:"write file [FILE] content [CONTENT] type [TYPE]",arguments:{FILE:{type:t.ArgumentType.STRING,defaultValue:"new file.txt"},TYPE:{type:t.ArgumentType.STRING,defaultValue:"text",menu:"writeFileType"},CONTENT:{type:t.ArgumentType.STRING,defaultValue:"Hello, world?"}}},{opcode:"renameFile",blockType:t.BlockType.COMMAND,text:"rename [FROM] to [TO]",arguments:{FROM:{type:t.ArgumentType.STRING,defaultValue:"hello.txt"},TO:{type:t.ArgumentType.STRING,defaultValue:"hello renamed.txt"}}},{opcode:"copyFile",blockType:t.BlockType.COMMAND,text:"copy [FROM] to [TO]",arguments:{FROM:{type:t.ArgumentType.STRING,defaultValue:"hello.txt"},TO:{type:t.ArgumentType.STRING,defaultValue:"Copy of hello.txt"}}},{opcode:"copyFileToArchive",blockType:t.BlockType.COMMAND,text:"copy [FROM] in [FROMARCHIVE] to [TO] in [TOARCHIVE]",arguments:{FROM:{type:t.ArgumentType.STRING,defaultValue:"hello.txt"},TO:{type:t.ArgumentType.STRING,defaultValue:"Copy of hello.txt"},FROMARCHIVE:{type:t.ArgumentType.STRING,defaultValue:"archive"},TOARCHIVE:{type:t.ArgumentType.STRING,defaultValue:"other archive"}}},{opcode:"deleteFile",blockType:t.BlockType.COMMAND,text:"delete [FILE]",arguments:{FILE:{type:t.ArgumentType.STRING,defaultValue:"hello.txt"}}},{opcode:"getFile",blockType:t.BlockType.REPORTER,text:"file [FILE] as [TYPE]",arguments:{FILE:{type:t.ArgumentType.STRING,defaultValue:"hello.txt"},TYPE:{type:t.ArgumentType.STRING,defaultValue:"text",menu:"getFileType"}}},"---",{opcode:"setFileMeta",blockType:t.BlockType.COMMAND,text:"set [META] of [FILE] to [VALUE]",arguments:{META:{type:t.ArgumentType.STRING,defaultValue:"modified days since 2000",menu:"setFileMeta"},FILE:{type:t.ArgumentType.STRING,defaultValue:"folder/dango.png"},VALUE:{type:t.ArgumentType.STRING,defaultValue:"0"}}},{opcode:"getFileMeta",blockType:t.BlockType.REPORTER,text:"[META] of [FILE]",arguments:{META:{type:t.ArgumentType.STRING,defaultValue:"name",menu:"fileMeta"},FILE:{type:t.ArgumentType.STRING,defaultValue:"folder/dango.png"}}},"---",{opcode:"createDir",blockType:t.BlockType.COMMAND,text:"create directory [DIR]",arguments:{DIR:{type:t.ArgumentType.STRING,defaultValue:"new folder"}}},{opcode:"goToDir",blockType:t.BlockType.COMMAND,text:"go to directory [DIR]",arguments:{DIR:{type:t.ArgumentType.STRING,defaultValue:"folder"}}},{opcode:"getDir",blockType:t.BlockType.REPORTER,text:"contents of directory [DIR]",arguments:{DIR:{type:t.ArgumentType.STRING,defaultValue:"."}}},{opcode:"currentDir",blockType:t.BlockType.REPORTER,text:"current directory path"},"---",{opcode:"setComment",blockType:t.BlockType.COMMAND,text:"set archive comment to [COMMENT]",arguments:{COMMENT:{type:t.ArgumentType.STRING,defaultValue:"any text"}}},{opcode:"getComment",blockType:t.BlockType.REPORTER,text:"archive comment",arguments:{}},"---",{opcode:"normalizePath",blockType:t.BlockType.REPORTER,text:"path [PATH] from [ORIGIN]",arguments:{PATH:{type:t.ArgumentType.STRING,defaultValue:"../folder3/"},ORIGIN:{type:t.ArgumentType.STRING,defaultValue:"/folder/folder2"}}}],menus:{fileType:{acceptReporters:!0,items:[{text:"URL",value:"URL"},{text:"base64",value:"base64"},{text:"hex",value:"hex"},{text:"binary",value:"binary"},{text:"string",value:"string"}]},zipFileType:{acceptReporters:!0,items:[{text:"data: URL",value:"data: URL"},{text:"base64",value:"base64"},{text:"hex",value:"hex"},{text:"binary",value:"binary"},{text:"string",value:"string"}]},getFileType:{acceptReporters:!0,items:[{text:"text",value:"text"},{text:"data: URL",value:"data: URL"},{text:"base64",value:"base64"},{text:"hex",value:"hex"},{text:"binary",value:"binary"}]},writeFileType:{acceptReporters:!0,items:[{text:"text",value:"text"},{text:"URL",value:"URL"},{text:"base64",value:"base64"},{text:"hex",value:"hex"},{text:"binary",value:"binary"}]},compressionLevel:{acceptReporters:!0,items:[{text:"no compression (fastest)",value:"0"},{text:"1 (fast, large)",value:"1"},{text:"2",value:"2"},{text:"3",value:"3"},{text:"4",value:"4"},{text:"5",value:"5"},{text:"6",value:"6"},{text:"7",value:"7"},{text:"8",value:"8"},{text:"9 (slowest, smallest)",value:"9"}]},fileMeta:{acceptReporters:!0,items:[{text:"name",value:"name"},{text:"path",value:"path"},{text:"folder",value:"folder"},{text:"modification date",value:"modification date"},{text:"long modification date",value:"long modification date"},{text:"modified days since 2000",value:"modified days since 2000"},{text:"unix modified timestamp",value:"unix modified timestamp"},{text:"comment",value:"comment"}]},setFileMeta:{acceptReporters:!0,items:[{text:"modified days since 2000",value:"modified days since 2000"},{text:"unix modified timestamp",value:"unix modified timestamp"},{text:"comment",value:"comment"}]}}}}normalize(t,e){e=e.toString().replaceAll(/\\/g,"/"),t=t.toString().replaceAll(/\\/g,"/"),e.startsWith("/")?t="":t.endsWith("/")||(t+="/");let i=(t+e).split("/"),r=[];for(const t in i){const e=i[t];if("."!==e){if(""===e){if(0!=+t&&+t!=i.length-1)throw new Error("Cannot have empty directory names");if(0==+t)continue}if(".."!==e)r.push(e);else{if(r.length<=0)throw new Error("Cannot go above root");r.pop()}}}return"/"+r.join("/")}splitIntoParts(t,e){const i=[];for(let r=0;r<t.length;r+=e)i.push(t.substring(r,r+e));return i}getObj(t,e=this.zip){return this.zips[e].files[t.substring(1)]||this.zips[e].files[t]}createFolders(t,e){try{t=this.normalize(t,".");let i="";for(const r of t.split("/"))""!==r&&(""!==i&&(i+="/"),i+=r,e.folder(i))}catch(e){console.error(`Zip extension: Error creating folders for ${t}:`,e)}}goBackFolders(t){const e=this.zipPaths[t].split("/");this.zipPaths[t]="";let i=0;for(;i<e.length;){if(""===e[i]){i++;continue}const r=this.zipPaths[t]+e[i]+"/";if(!this.getObj(r,t))break;this.zipPaths[t]=r,i++}""===this.zipPaths[t]&&(this.zipPaths[t]="/")}createEmptyAs({NAME:i}){this.zipError=!1,(i=t.Cast.toString(i))?(this.zip=i,this.zips[this.zip]=new e,this.zipPaths[this.zip]="/"):this.zipError=!0}createEmpty(){this.createEmptyAs({NAME:"archive"})}async openAs({TYPE:i,DATA:r,NAME:s}){if(this.zipError=!1,this.zip=null,s=t.Cast.toString(s))try{switch(r=t.Cast.toString(r),i){case"base64":case"data: URL":case"URL":{"base64"===i&&(r="data:application/zip;base64,"+r);const e=await t.fetch(r);r=await e.blob()}break;case"hex":{if(!/^(?:[0-9A-F]{2})*$/i.test(r))return;const t=this.splitIntoParts(r,2);r=Uint8Array.from(t.map((t=>parseInt(t,16))))}break;case"binary":{if(!/^(?:[01]{8})*$/i.test(r))return;const t=this.splitIntoParts(r,8);r=Uint8Array.from(t.map((t=>parseInt(t,2))))}}this.zip=s,this.zips[this.zip]=await e.loadAsync(r,{createFolders:!0}),this.zipPaths[this.zip]="/"}catch(t){this.zipError=!0,this.zip=null,console.error("Zip extension: Could not open zip file.",t)}else this.zipError=!0}open({TYPE:t,DATA:e}){return this.openAs({TYPE:t,DATA:e,NAME:"archive"})}async getZip({TYPE:e,COMPRESSION:i}){if(!this.zip)return"";try{i=t.Cast.toNumber(i),i=Math.max(Math.min(Math.round(i),9),0);const r={compression:0===i?"STORE":"DEFLATE",compressionOptions:{level:i}};switch(e){case"text":case"string":return await this.zips[this.zip].generateAsync({type:"binarystring",...r});case"base64":case"data: URL":{let t=await this.zips[this.zip].generateAsync({type:"base64",...r});return"data: URL"===e&&(t="data:application/zip;base64,"+t),t}case"hex":return(await this.zips[this.zip].generateAsync({type:"array",...r})).map((t=>t.toString(16).padStart(2,"0"))).join("");case"binary":return(await this.zips[this.zip].generateAsync({type:"array",...r})).map((t=>t.toString(2).padStart(8,"0"))).join("");default:return""}}catch(t){console.error(`Zip extension: Error creating zip with type ${e} compression ${i}:`,t)}}close(){delete this.zips[this.zip],delete this.zipPaths[this.zip],this.zip=null}closeAll(){this.zips=Object.create(null),this.zipPaths=Object.create(null),this.zip=null}isOpen(){return!!this.zip}isError(){return this.zipError}currentArchive(){return this.zip?this.zip:""}goToArchive({NAME:e}){(e=t.Cast.toString(e))?this.zips[e]&&(this.zip=e):this.zip=null}listArchives(){return JSON.stringify(Object.keys(this.zips))}exists({OBJECT:e}){try{return!!this.getObj(this.normalize(this.zipPaths[this.zip],t.Cast.toString(e)))}catch(t){return!1}}async getFile({FILE:e,TYPE:i}){if(!this.zip)return"";e=t.Cast.toString(e),i=t.Cast.toString(i);try{const t=this.normalize(this.zipPaths[this.zip],e);if(t.endsWith("/"))return"";const r=this.getObj(t);if(!r||r.dir)return"";switch(i){case"text":return await r.async("string");case"base64":case"data: URL":{let t=await r.async("base64");return"data: URL"===i&&(t="data:application/octet-stream;base64,"+t),t}case"hex":return(await r.async("array")).map((t=>t.toString(16).padStart(2,"0"))).join("");case"binary":return(await r.async("array")).map((t=>t.toString(2).padStart(8,"0"))).join("");default:return""}}catch(t){return console.error(`Zip extension: Error getting file ${e} with type ${i}:`,t),""}}async writeFile({FILE:e,CONTENT:i,TYPE:r}){if(this.zip){e=t.Cast.toString(e),i=t.Cast.toString(i),r=t.Cast.toString(r);try{let s=this.normalize(this.zipPaths[this.zip],e);if(s.endsWith("/"))return;const a=this.getObj(s);if(a&&a.dir)return;switch(s.startsWith("/")&&(s=s.substring(1)),r){case"text":this.zips[this.zip].file(s,i,{createFolders:!0});break;case"base64":case"data: URL":"data: URL"===r&&(i=i.substring(i.indexOf(","))),this.zips[this.zip].file(s,i,{base64:!0,createFolders:!0});break;case"URL":{const e=await t.fetch(i);this.zips[this.zip].file(s,await e.blob(),{base64:!0,createFolders:!0})}break;case"hex":{if(!/^(?:[0-9A-F]{2})*$/i.test(i))return"";const t=this.splitIntoParts(i,2),e=Uint8Array.from(t.map((t=>parseInt(t,16))));this.zips[this.zip].file(s,e,{createFolders:!0})}break;case"binary":{if(!/^(?:[01]{8})*$/i.test(i))return"";const t=this.splitIntoParts(i,8),e=Uint8Array.from(t.map((t=>parseInt(t,2))));this.zips[this.zip].file(s,e,{createFolders:!0})}break;default:return""}}catch(t){console.error(`Zip extension: Error writing to file ${e} type ${r}:`,t)}}}async _renameFile(t,e,i,r,s){const a=async(t,e,i,r)=>{if(t===i&&e==r)return;const a=e.files[t];if(s){let t;t=a.dir?r.folder(i):r.file(i,await a.async("uint8array"),a.options),t.date=structuredClone(a.date),t.dosPermissions=a.dosPermissions,t.unixPermissions=a.unixPermissions,t.comment=a.comment}else r.files[i]=a,a.name=i,delete e.files[t]};let o=this.zips[e],n=this.zips[r];if(o&&n)try{let p=this.normalize(this.zipPaths[e],t),l=this.getObj(p,e);if(l||p.endsWith("/")||(p+="/",l=this.getObj(p,e)),!l)return;let c=this.normalize(this.zipPaths[r],i);const h=i.replaceAll(/\\/g,"/"),u=h.split("/").length-1;if(u<=+l.dir&&(0===u||h.endsWith("/")))if(c=this.normalize(p,"../"+h),l.dir)p.endsWith("/")||(p+="/");else if(p.endsWith("/"))return;if(p.startsWith("/")&&(p=p.substring(1)),c.startsWith("/")&&(c=c.substring(1)),!l.dir)return void await a(p,o,c,n);c.endsWith("/")||(c+="/"),!s&&this.zipPaths[e].substring(1).startsWith(p)&&(o===n?this.zipPaths[e]="/"+c+this.zipPaths[e].substring(1).substring(p.length):this.goBackFolders(o));for(const t in o.files){if(!t.startsWith(p))continue;const e=t.substring(p.length);await a(t,o,c+e,n)}this.createFolders(c,n)}catch(e){console.error(`Zip extension: Error ${s?"copying":"renaming"} ${t} to ${i}:`,e)}}renameFile({FROM:e,TO:i}){this.zip&&(e=t.Cast.toString(e),i=t.Cast.toString(i),this._renameFile(e,this.zip,i,this.zip,!1))}copyFile({FROM:e,TO:i}){this.zip&&(e=t.Cast.toString(e),i=t.Cast.toString(i),this._renameFile(e,this.zip,i,this.zip,!0))}copyFileToArchive({FROM:e,FROMARCHIVE:i,TO:r,TOARCHIVE:s}){this.zip&&(e=t.Cast.toString(e),i=t.Cast.toString(i),r=t.Cast.toString(r),s=t.Cast.toString(s),this._renameFile(e,i,r,s,!0))}deleteFile({FILE:e}){if(this.zip){e=t.Cast.toString(e);try{let t=this.normalize(this.zipPaths[this.zip],e);if(!this.getObj(t))return;if("/"===t)return;const i=this.getObj(t).dir&&this.zipPaths[this.zip].startsWith(t);t.startsWith("/")&&(t=t.substring(1)),this.zips[this.zip].remove(t),i&&this.goBackFolders(this.zip)}catch(t){console.error(`Zip extension: Error deleting file ${e}:`,t)}}}setFileMeta({META:e,FILE:i,VALUE:r}){if(this.zip){e=t.Cast.toString(e),i=t.Cast.toString(i),r=t.Cast.toString(r);try{const s=this.normalize(this.zipPaths[this.zip],i),a=this.getObj(s);if(!a)return"";switch(e){case"modified days since 2000":{const e=864e5,i=+new Date(2e3,0,1);a.date=new Date(i+t.Cast.toNumber(r)*e)}break;case"unix modified timestamp":a.date=new Date(t.Cast.toNumber(r));break;case"comment":a.comment=r;break;default:return}}catch(t){return console.error(`Zip extension: Error getting ${e} of ${i}:`,t),""}}}getFileMeta({META:e,FILE:i}){if(!this.zip)return"";e=t.Cast.toString(e),i=t.Cast.toString(i);try{const t=this.normalize(this.zipPaths[this.zip],i),r=this.getObj(t);if(!r)return"";switch(e){case"name":{const t=r.name.split("/");return t[t.length-1-+r.dir]||""}case"path":return"/"+r.name;case"folder":{const t=r.name.split("/"),e=t.slice(0,t.length-1-+r.dir).join("/");return"/"+e+(""===e?"":"/")}case"modification date":return r.date.toLocaleString(navigator.language);case"long modification date":return(new Date).toLocaleString(navigator.language,{dateStyle:"full",timeStyle:"medium"});case"modified days since 2000":{const t=864e5,e=+new Date(2e3,0,1);return(+r.date-e)/t}case"unix modified timestamp":return+r.date;case"comment":return r.comment||"";default:return""}}catch(t){return console.error(`Zip extension: Error getting ${e} of ${i}:`,t),""}}createDir({DIR:e}){if(this.zip){e=t.Cast.toString(e);try{let t=this.normalize(this.zipPaths[this.zip],e);if(t.endsWith("/")||(t+="/"),t.startsWith("/")&&(t=t.substring(1)),this.getObj(t))return;this.zips[this.zip].folder(t)}catch(t){console.error(`Error creating directory ${e}:`,t)}}}goToDir({DIR:e}){if(this.zip){e=t.Cast.toString(e);try{let t=this.normalize(this.zipPaths[this.zip],e);if(t.endsWith("/")||(t+="/"),!this.getObj(t)&&"/"!==t)return;this.zipPaths[this.zip]=t}catch(t){console.error(`Error going to directory ${e}:`,t)}}}getDir({DIR:e}){if(!this.zip)return"";try{(e=t.Cast.toString(e)).endsWith("/")||(e+="/");const i=this.normalize(this.zipPaths[this.zip],e);if(!this.getObj(i)&&"/"!==i)return"";const r=i.substring(1),s=r.length;return JSON.stringify(Object.values(this.zips[this.zip].files).filter((t=>!!t.name.startsWith(r)&&(!(t.name.substring(s).split("/").length>t.dir+1)&&t.name!==r))).map((t=>t.name.substring(s))))}catch(t){return console.error(`Zip extension: Could not get directory ${e}:`,t),""}}currentDir(){return this.zipPaths[this.zip]||""}setComment({COMMENT:e}){this.zip&&(this.zips[this.zip].comment=t.Cast.toString(e))}getComment({COMMENT:t}){return this.zip&&this.zips[this.zip].comment||""}normalizePath({ORIGIN:e,PATH:i}){try{return this.normalize(t.Cast.toString(e),t.Cast.toString(i))}catch(t){return""}}})}(globalThis.Scratch);