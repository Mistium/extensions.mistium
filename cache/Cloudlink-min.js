Scratch.translate.setup({fi:{"_(OLD - DO NOT USE IN NEW PROJECTS) my username":"(VANHA - Ãƒâ€žLÃƒâ€ž KÃƒâ€žYTÃƒâ€ž UUSISSA PROJEKTEISSA) oma kÃƒÂ¤yttÃƒÂ¤jÃƒÂ¤nimi","_A name":"nimi","_All data":"kaikki data","_Another name":"toinen nimi",_Apple:"omena",_Banana:"banaani","_Direct data":"kohdennettu data","_Global data":"globaali data","_Global variables":"globaalit muuttujat","_Hide old blocks":"Piilota vanhat lohkot","_ID [ID] connected?":"onko tunniste [ID] yhdistetty?","_Private data":"yksityinen data","_Private variables":"yksityiset muuttujat","_Show old blocks":"NÃƒÂ¤ytÃƒÂ¤ vanhat lohkot","_Status code":"tilakoodi","_When I receive new [TYPE] data for [VAR]":"kun vastaanotan uuden kohteen [TYPE] datan muuttujalle [VAR]","_[NUM] from JSON array [ARRAY]":"[NUM] JSON-taulukossa [ARRAY]","_[PATH] of [JSON_STRING]":"[PATH] JSON-koodissa [JSON_STRING]","_attach listener [ID] to next packet":"lisÃƒÂ¤ÃƒÂ¤ kuuntelija [ID] seuraavaan datapakettiin","_clear all packets for [TYPE]":"tyhjennÃƒÂ¤ kaikki kohteen [TYPE] datapaketit","_connect to [IP]":"yhdistÃƒÂ¤ palvelimeen [IP]","_connect to server [ID]":"yhdistÃƒÂ¤ palvelimeen nro [ID]","_connected?":"onko yhdistetty?","_convert [toBeJSONified] to JSON":"muunna [toBeJSONified] JSON-muotoon",_direct:"kohdennettu","_direct data":"kohdennettu data",_disconnect:"katkaise yhteys","_extension version":"laajennuksen versio","_failed to connnect?":"epÃƒÂ¤onnistuiko yhteyden muodostaminen?","_fetch data from URL [url]":"hae data URL-osoitteesta [url]","_global data":"globaali data","_got new [TYPE] data for variable [VAR]?":"onko uusi [TYPE] [VAR] data saapunut?","_got new [TYPE]?":"onko uusi [TYPE] saapunut?","_got new packet with listener [ID]?":"onko uusi datapaketti kuuntelijalla [ID] saapunut?",_id:"tunniste","_is [JSON_STRING] valid JSON?":"onko [JSON_STRING] kelvollista JSON-koodia?","_link status":"yhteyden tila","_link to room(s) [ROOMS]":"yhdistÃƒÂ¤ huoneisiin [ROOMS]","_linked to rooms?":"onko yhdistetty huoneisiin?","_lost connection?":"katkesiko yhteys?","_my IP address":"oma IP-osoite","_my user object":"oma kÃƒÂ¤yttÃƒÂ¤jÃƒÂ¤olio","_my username":"oma kÃƒÂ¤yttÃƒÂ¤jÃƒÂ¤nimi","_packet queue for [TYPE]":"kohteen [TYPE] datapakettijono","_private data":"yksityinen data","_reset got new [ID] listener status":"nollaa uusi kuuntelijan [ID] tila","_reset got new [TYPE] [VAR] status":"nollaa uusi kohteen [TYPE] muuttujan [VAR] tila","_reset got new [TYPE] status":"nollaa uusi kohteen [TYPE] tila","_response for listener [ID]":"vastaus kuuntelijalle [ID]","_select room(s) [ROOMS] for next packet":"valitse huoneet [ROOMS] seuraavalle datapaketille","_send [DATA]":"lÃƒÂ¤hetÃƒÂ¤ [DATA]","_send [DATA] to [ID]":"lÃƒÂ¤hetÃƒÂ¤ [DATA] kÃƒÂ¤yttÃƒÂ¤jÃƒÂ¤lle [ID]","_send command [CMD] [ID] [DATA]":"lÃƒÂ¤hetÃƒÂ¤ komento [CMD] [ID] [DATA]","_send command without ID [CMD] [DATA]":"lÃƒÂ¤hetÃƒÂ¤ komento ilman tunnistetta [CMD] [DATA]","_send request with method [method] for URL [url] with data [data] and headers [headers]":"lÃƒÂ¤hetÃƒÂ¤ pyyntÃƒÂ¶ menetelmÃƒÂ¤llÃƒÂ¤ [method] URL-osoitteeseen [url] datalla [data] ja otsakkeilla [headers]","_send variable [VAR] to [ID] with data [DATA]":"lÃƒÂ¤hetÃƒÂ¤ muuttuja [VAR] kÃƒÂ¤yttÃƒÂ¤jÃƒÂ¤lle [ID] datalla [DATA]","_send variable [VAR] with data [DATA]":"lÃƒÂ¤hetÃƒÂ¤ muuttuja [VAR] datalla [DATA]","_server MOTD":"palvelimen viesti","_server list":"palvelinluettelo","_server version":"palvelimen versio","_set [NAME] as username":"aseta kÃƒÂ¤yttÃƒÂ¤jÃƒÂ¤nimeksi [NAME]","_size of queue for [TYPE]":"kohteen [TYPE] jonon koko","_status code":"tilakoodi","_unlink from all rooms":"katkaise yhteys kaikkiin huoneisiin","_username synced?":"onko kÃƒÂ¤yttÃƒÂ¤jÃƒÂ¤nimi synkronoitu?",_usernames:"kÃƒÂ¤yttÃƒÂ¤jÃƒÂ¤nimet",_val:"arvo","_when I receive new [TYPE] message":"kun vastaanotan uuden kohteen [TYPE] viestin","_when I receive new message with listener [ID]":"kun vastaanotan uuden viestin kuuntelijalla [ID]","_when connected":"kun yhteys muodostuu","_when disconnected":"kun yhteys katkeaa"},nl:{"_[PATH] of [JSON_STRING]":"[PATH] van [JSON_STRING]",_id:"ID"},ru:{"_[PATH] of [JSON_STRING]":"[PATH] ÃÂ¸ÃÂ· [JSON_STRING]",_id:"ID"},"zh-cn":{"_(OLD - DO NOT USE IN NEW PROJECTS) my username":"(Ã¦â€”Â§Ã§â€°Ë† - Ã¤Â¸ÂÃ¨Â¦ÂÃ¥Å“Â¨Ã¦â€“Â°Ã©Â¡Â¹Ã§â€ºÂ®Ã¤Â¸Â­Ã¤Â½Â¿Ã§â€Â¨Ã¥Â®Æ’) Ã¦Ë†â€˜Ã§Å¡â€žÃ§â€Â¨Ã¦Ë†Â·Ã¥ÂÂ","_A name":"Ã¤Â¸â‚¬Ã¤Â¸ÂªÃ¥ÂÂÃ¥Â­â€”","_All data":"Ã¦â€°â‚¬Ã¦Å“â€°Ã¦â€¢Â°Ã¦ÂÂ®","_Another name":"Ã¥ÂÂ¦Ã¤Â¸â‚¬Ã¤Â¸ÂªÃ¥ÂÂÃ§Â§Â°",_Apple:"Ã¨â€¹Â¹Ã¦Å¾Å“",_Banana:"Ã©Â¦â„¢Ã¨â€¢â€°","_Direct data":"Ã§â€ºÂ´Ã¦Å½Â¥Ã¦â€¢Â°Ã¦ÂÂ®","_Global data":"Ã¥â€¦Â¨Ã¥Â±â‚¬Ã¦â€¢Â°Ã¦ÂÂ®","_Global variables":"Ã¥â€¦Â¨Ã¥Â±â‚¬Ã¥ÂËœÃ©â€¡Â","_Hide old blocks":"Ã©Å¡ÂÃ¨â€”ÂÃ¦â€”Â§Ã§Â§Â¯Ã¦Å“Â¨","_ID [ID] connected?":"ID[ID]Ã¨Â¿Å¾Ã¦Å½Â¥Ã¯Â¼Å¸","_Private data":"Ã§Â§ÂÃ¦Å“â€°Ã¦â€¢Â°Ã¦ÂÂ®","_Private variables":"Ã§Â§ÂÃ¦Å“â€°Ã¥ÂËœÃ©â€¡Â","_Show old blocks":"Ã¦ËœÂ¾Ã§Â¤ÂºÃ¦â€”Â§Ã§Â§Â¯Ã¦Å“Â¨","_Status code":"Ã§Å Â¶Ã¦â‚¬ÂÃ§ Â","_When I receive new [TYPE] data for [VAR]":"Ã¥Â½â€œÃ¦Ë†â€˜Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã§Å¡â€žÃ§â€Â¨Ã¤ÂºÅ½[VAR]Ã§Å¡â€ž[TYPE]Ã¤Â¿Â¡Ã¦ÂÂ¯","_[NUM] from JSON array [ARRAY]":"JSONÃ¦â€¢Â°Ã§Â»â€ž[ARRAY]Ã§Å¡â€ž[NUM]","_[PATH] of [JSON_STRING]":"[JSON_STRING]Ã¤Â¸Â­Ã§Å¡â€ž[PATH]","_[TYPE] [VAR] data":"[TYPE][VAR]Ã¦â€¢Â°Ã¦ÂÂ®","_attach listener [ID] to next packet":"Ã©â„¢â€žÃ¥Å  Ã§â€ºâ€˜Ã¥ÂÂ¬Ã¥â„¢Â¨ [ID] Ã¥Ë†Â°Ã¤Â¸â€¹Ã¤Â¸â‚¬Ã¤Â¸ÂªÃ¦â€¢Â°Ã¦ÂÂ®Ã¥Å’â€¦","_clear all packets for [TYPE]":"Ã¦Â¸â€¦Ã§Â©Âº[TYPE]Ã§Å¡â€žÃ¦â€°â‚¬Ã¦Å“â€°Ã¦â€¢Â°Ã¦ÂÂ®Ã¥Å’â€¦","_connect to [IP]":"Ã¨Â¿Å¾Ã¦Å½Â¥Ã¥Ë†Â°[IP]","_connect to server [ID]":"Ã¨Â¿Å¾Ã¦Å½Â¥Ã¥Ë†Â°Ã¦Å“ÂÃ¥Å Â¡Ã¥â„¢Â¨[ID]","_connected?":"Ã¥Â·Â²Ã¨Â¿Å¾Ã¦Å½Â¥Ã¯Â¼Å¸","_convert [toBeJSONified] to JSON":"Ã¥Â°â€ [toBeJSONified]Ã¨Â½Â¬Ã¤Â¸ÂºJSON",_direct:"Ã§â€ºÂ´Ã¦Å½Â¥","_direct data":"Ã§â€ºÂ´Ã¦Å½Â¥Ã¦â€¢Â°Ã¦ÂÂ®",_disconnect:"Ã¦â€“Â­Ã¥Â¼â‚¬Ã¨Â¿Å¾Ã¦Å½Â¥","_extension version":"Ã¦â€°Â©Ã¥Â±â€¢Ã§â€°Ë†Ã¦Å“Â¬","_failed to connnect?":"Ã¨Â¿Å¾Ã¦Å½Â¥Ã¥Â¤Â±Ã¨Â´Â¥Ã¯Â¼Å¸","_fetch data from URL [url]":"Ã¤Â»Å½ URL [url]Ã¨Å½Â·Ã¥Ââ€“Ã¦â€¢Â°Ã¦ÂÂ®","_global data":"Ã¥â€¦Â¨Ã¥Â±â‚¬Ã¦â€¢Â°Ã¦ÂÂ®","_got new [TYPE] data for variable [VAR]?":"Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã§Å¡â€žÃ§â€Â¨Ã¤ÂºÅ½Ã¥ÂËœÃ©â€¡Â[VAR]Ã§Å¡â€ž[TYPE]Ã¦â€¢Â°Ã¦ÂÂ®Ã¯Â¼Å¸","_got new [TYPE]?":"Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã§Å¡â€ž[TYPE]Ã¯Â¼Å¸","_got new packet with listener [ID]?":"Ã¤Â»Å½Ã§â€ºâ€˜Ã¥ÂÂ¬Ã¥â„¢Â¨[ID]Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã§Å¡â€žÃ¥Å’â€¦Ã¯Â¼Å¸",_id:"ID","_is [JSON_STRING] valid JSON?":"[JSON_STRING]Ã¦ËœÂ¯Ã¥ÂË†Ã¦Â³â€¢JSONÃ¯Â¼Å¸","_link status":"Ã©â€œÂ¾Ã¦Å½Â¥Ã§Å Â¶Ã¦â‚¬Â","_link to room(s) [ROOMS]":"Ã¨Â¿Å¾Ã¦Å½Â¥Ã¥Ë†Â°Ã¦Ë†Â¿Ã©â€”Â´(Ã¥Ë†â€”Ã¨Â¡Â¨)[ROOMS]","_linked to rooms?":"Ã¥Â·Â²Ã¨Â¿Å¾Ã¦Å½Â¥Ã¥Ë†Â°Ã¦Ë†Â¿Ã©â€”Â´Ã¯Â¼Å¸","_lost connection?":"Ã¨Â¿Å¾Ã¦Å½Â¥Ã¤Â¸Â¢Ã¥Â¤Â±Ã¯Â¼Å¸","_my IP address":"Ã¦Ë†â€˜Ã§Å¡â€žIPÃ¥Å“Â°Ã¥Ââ‚¬","_my user object":"Ã¦Ë†â€˜Ã§Å¡â€žÃ§â€Â¨Ã¦Ë†Â·Ã¥Â¯Â¹Ã¨Â±Â¡","_my username":"Ã¦Ë†â€˜Ã§Å¡â€žÃ§â€Â¨Ã¦Ë†Â·Ã¥ÂÂ","_packet queue for [TYPE]":"[TYPE]Ã§Å¡â€žÃ¥Å’â€¦Ã©ËœÅ¸Ã¥Ë†â€”","_private data":"Ã§Â§ÂÃ¦Å“â€°Ã¦â€¢Â°Ã¦ÂÂ®","_reset got new [ID] listener status":"Ã©â€¡ÂÃ§Â½Â®Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã§Å¡â€ž[ID]Ã§â€ºâ€˜Ã¥ÂÂ¬Ã¥â„¢Â¨Ã§Å¡â€žÃ§Å Â¶Ã¦â‚¬Â","_reset got new [TYPE] [VAR] status":"Ã©â€¡ÂÃ§Â½Â®Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã§Å¡â€ž[TYPE][VAR]Ã§Å Â¶Ã¦â‚¬Â","_reset got new [TYPE] status":"Ã©â€¡ÂÃ§Â½Â®Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã§Å¡â€ž[TYPE]Ã§Å Â¶Ã¦â‚¬Â","_response for listener [ID]":"Ã§â€ºâ€˜Ã¥ÂÂ¬Ã¥â„¢Â¨[ID]Ã§Å¡â€žÃ¥â€ºÅ¾Ã¥Âºâ€","_select room(s) [ROOMS] for next packet":"Ã¤Â¸ÂºÃ¤Â¸â€¹Ã¤Â¸â‚¬Ã¤Â¸ÂªÃ¦â€¢Â°Ã¦ÂÂ®Ã¥Å’â€¦Ã©â‚¬â€°Ã¦â€¹Â©Ã¦Ë†Â¿Ã©â€”Â´(Ã¥Ë†â€”Ã¨Â¡Â¨)[ROOMS]","_send [DATA]":"Ã¥Ââ€˜Ã©â‚¬Â[DATA]","_send [DATA] to [ID]":"Ã¥Ââ€˜Ã©â‚¬Â[DATA]Ã§Â»â„¢[ID]","_send command [CMD] [ID] [DATA]":"Ã¥Ââ€˜Ã©â‚¬ÂÃ¥â€˜Â½Ã¤Â»Â¤[CMD][ID][DATA]","_send command without ID [CMD] [DATA]":"Ã¥Ââ€˜Ã©â‚¬ÂÃ¦Â²Â¡Ã¦Å“â€°ID[CMD][DATA]Ã§Å¡â€žÃ¥â€˜Â½Ã¤Â»Â¤","_send request with method [method] for URL [url] with data [data] and headers [headers]":"Ã¥Ââ€˜Ã©â‚¬Â[method]Ã¦â€“Â¹Ã¦Â³â€¢Ã§Å¡â€žÃ¨Â¯Â·Ã¦Â±â€šÃ§Â»â„¢URL[url]Ã¦ÂÂºÃ¥Â¸Â¦Ã¦â€¢Â°Ã¦ÂÂ®[data]Ã¥Â¤Â´Ã©Æ’Â¨Ã¤Â¿Â¡Ã¦ÂÂ¯ [headers]","_send variable [VAR] to [ID] with data [DATA]":"Ã¥Ââ€˜Ã©â‚¬ÂÃ¥ÂËœÃ©â€¡Â[VAR]Ã§Â»â„¢[ID]Ã©â„¢â€žÃ¥Â¸Â¦Ã¦â€¢Â°Ã¦ÂÂ®[DATA]","_send variable [VAR] with data [DATA]":"Ã¥Ââ€˜Ã©â‚¬ÂÃ¥ÂËœÃ©â€¡Â[VAR]Ã©â„¢â€žÃ¥Â¸Â¦Ã¦â€¢Â°Ã¦ÂÂ®[DATA]","_server MOTD":"Ã¦Å“ÂÃ¥Å Â¡Ã¥â„¢Â¨MOTD","_server list":"Ã¦Å“ÂÃ¥Å Â¡Ã¥â„¢Â¨Ã¥Ë†â€”Ã¨Â¡Â¨","_server version":"Ã¦Å“ÂÃ¥Å Â¡Ã¥â„¢Â¨Ã§â€°Ë†Ã¦Å“Â¬","_set [NAME] as username":"Ã¨Â®Â¾Ã§Â½Â®[NAME]Ã¤Â¸ÂºÃ§â€Â¨Ã¦Ë†Â·Ã¥ÂÂ","_size of queue for [TYPE]":"[TYPE]Ã§Å¡â€žÃ©ËœÅ¸Ã¥Ë†â€”Ã¥Â¤Â§Ã¥Â°Â","_status code":"Ã§Å Â¶Ã¦â‚¬ÂÃ§ Â","_unlink from all rooms":"Ã¤Â»Å½Ã¦â€°â‚¬Ã¦Å“â€°Ã¦Ë†Â¿Ã©â€”Â´Ã¦â€“Â­Ã¥Â¼â‚¬Ã¨Â¿Å¾Ã¦Å½Â¥","_username synced?":"Ã¥Â·Â²Ã¥ÂÅ’Ã¦Â­Â¥Ã§â€Â¨Ã¦Ë†Â·Ã¥ÂÂÃ¯Â¼Å¸",_usernames:"Ã§â€Â¨Ã¦Ë†Â·Ã¥ÂÂÃ¥Ë†â€”Ã¨Â¡Â¨","_when I receive new [TYPE] message":"Ã¥Â½â€œÃ¦Ë†â€˜Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã§Å¡â€ž[TYPE]Ã¤Â¿Â¡Ã¦ÂÂ¯","_when I receive new message with listener [ID]":"Ã¥Â½â€œÃ¦Ë†â€˜Ã©â‚¬Å¡Ã¨Â¿â€¡Ã§â€ºâ€˜Ã¥ÂÂ¬Ã¥â„¢Â¨[ID]Ã¦Å½Â¥Ã¦â€Â¶Ã¥Ë†Â°Ã¦â€“Â°Ã¦Â¶Ë†Ã¦ÂÂ¯Ã¦â€”Â¶`","_when connected":"Ã¥Â½â€œÃ¥Â»ÂºÃ§Â«â€¹Ã¨Â¿Å¾Ã¦Å½Â¥","_when disconnected":"Ã¥Â½â€œÃ¦â€“Â­Ã¥Â¼â‚¬Ã¨Â¿Å¾Ã¦Å½Â¥"}}),function(e){"use strict";if(!e.extensions.unsandboxed)throw new Error("The CloudLink extension must run unsandboxed.");const t=e.vm,a=t.runtime,r={editorType:"TurboWarp",versionNumber:2,versionString:"0.1.3"};var n={hideCLDeprecatedBlocks:!0,socket:null,currentServerUrl:"",lastServerUrl:"",gmsg:{queue:[],varState:"",hasNew:!1,eventHatTick:!1},pmsg:{queue:[],varState:"",hasNew:!1,eventHatTick:!1},gvar:{queue:[],varStates:{},eventHatTick:!1},pvar:{queue:[],varStates:{},eventHatTick:!1},direct:{queue:[],varState:"",hasNew:!1,eventHatTick:!1},statuscode:{queue:[],varState:"",hasNew:!1,eventHatTick:!1},ulist:[],motd:"",client_ip:"",server_version:"",listeners:{enablerState:!1,enablerValue:"",current:[],varStates:{}},rooms:{enablerState:!1,enablerValue:"",isLinked:!1,isAttemptingLink:!1,isAttemptingUnlink:!1,current:[],varStates:{}},username:{attempted:!1,accepted:!1,temp:"",value:""},myUserObject:{},linkState:{status:0,isAttemptingGracefulDisconnect:!1,disconnectType:0,identifiedProtocol:0},handshakeTimeout:null,handshakeAttempted:!1,serverList:{}};async function s(e){if("object"!=typeof e)return String(e);try{return JSON.stringify(e)}catch(t){return String(e)}}async function l(e){if(null==n.socket)return;if(e.hasOwnProperty("val"))try{e.val=JSON.parse(e.val)}catch{}if(n.listeners.enablerState&&(n.linkState.identifiedProtocol>=2&&(e.listener=n.listeners.enablerValue,n.listeners.varStates[String(args.ID)]={hasNew:!1,varState:{},eventHatTick:!1}),n.listeners.enablerState=!1),("link"==e.cmd||"unlink"==e.cmd)&&n.linkState.identifiedProtocol<2)return;let t="";try{t=JSON.stringify(e)}catch(e){return}n.socket.send(t)}async function o(e){n.server_version=e;const t={"0.2.":4,"0.1.9":3,"0.1.8":2,"0.1.7":1,"0.1.5":0,"S2.2":0,"0.1.":0,"S2.":0,"S1.":-1};for(const[a,r]of Object.entries(t))if(e.includes(a)&&n.linkState.identifiedProtocol<r){if(-1==r)return n.socket.close(1e3,"");n.linkState.identifiedProtocol=r}if(n.linkState.status=2,a.startHats("cloudlink_onConnect"),n.currentServerUrl!==n.lastServerUrl)return n.linkState.identifiedProtocol<4&&!confirm(`You have connected to an old CloudLink server, running version ${n.server_version}.\n\nFor your security and privacy, we recommend you disconnect from this server and connect to an up-to-date server.\n\nClick/tap "OK" to stay connected.`)?(n.linkState.isAttemptingGracefulDisconnect=!0,void n.socket.close(1e3,"Client going away (legacy server rejected by end user)")):void(n.lastServerUrl=n.currentServerUrl)}async function i(t){if(await e.canFetch(t)){n.linkState.status=1,n.linkState.disconnectType=0;try{n.socket=new WebSocket(t)}catch(e){return}n.socket.onopen=function(e){n.currentServerUrl=t,n.handshakeTimeout=window.setTimeout((function(){n.handshakeAttempted||(l({cmd:"handshake",val:{language:"Scratch",version:{editorType:r.editorType,versionNumber:r.versionNumber}},listener:"handshake_cfg"}),n.handshakeAttempted=!0)}),500)},n.socket.onmessage=function(t){!async function(t){let a={};try{a=JSON.parse(t)}catch(e){return}if(a.hasOwnProperty("cmd")){switch(a.cmd){case"gmsg":n.gmsg.varState=a.val,n.gmsg.hasNew=!0,n.gmsg.queue.push(a),n.gmsg.eventHatTick=!0;break;case"pmsg":n.pmsg.varState=a.val,n.pmsg.hasNew=!0,n.pmsg.queue.push(a),n.pmsg.eventHatTick=!0;break;case"gvar":n.gvar.varStates[String(a.name)]={hasNew:!0,varState:a.val,eventHatTick:!0},n.gvar.queue.push(a),n.gvar.eventHatTick=!0;break;case"pvar":n.pvar.varStates[String(a.name)]={hasNew:!0,varState:a.val,eventHatTick:!0},n.pvar.queue.push(a),n.pvar.eventHatTick=!0;break;case"direct":if(a.val.hasOwnProperty("cmd"))switch(a.val.cmd){case"vers":return window.clearTimeout(n.handshakeTimeout),void await o(a.val.val);case"motd":return void(n.motd=a.val.val)}n.direct.varState=a.val,n.direct.hasNew=!0,n.direct.queue.push(a),n.direct.eventHatTick=!0;break;case"client_obj":n.myUserObject=a.val;break;case"statuscode":if(0==n.linkState.identifiedProtocol)return;if(1==n.linkState.identifiedProtocol)n.statuscode.varState=a.val;else{if(a.hasOwnProperty("listener"))switch(a.listener){case"username_cfg":return void(a.code.includes("I:100")&&(n.myUserObject=a.val,n.username.value=a.val.username,n.username.accepted=!0));case"handshake_cfg":return;case"link":if(!n.rooms.isAttemptingLink)return;return void(a.code.includes("I:100")&&(n.rooms.isAttemptingLink=!1,n.rooms.isLinked=!0));case"unlink":if(!n.rooms.isAttemptingUnlink)return;return void(a.code.includes("I:100")&&(n.rooms.isAttemptingUnlink=!1,n.rooms.isLinked=!1))}n.statuscode.varState=a.code}n.statuscode.hasNew=!0,n.statuscode.queue.push(a),n.statuscode.eventHatTick=!0;break;case"ulist":if(0==n.linkState.identifiedProtocol||1==n.linkState.identifiedProtocol)n.ulist=String(a.val).split(";"),n.ulist.pop(n.ulist.length),n.username.attempted&&n.ulist.includes(n.username.temp)&&(n.username.value=n.username.temp,n.username.accepted=!0);else if(2==n.linkState.identifiedProtocol)n.ulist=a.val;else{if(!a.hasOwnProperty("mode"))return;switch(a.mode){case"set":n.ulist=a.val;break;case"add":n.ulist.push(a.val),n.recentlyJoinedUser=a.val,e.vm.runtime.startHats("cloudlink_whenuserconnects");break;case"remove":case"remove":let t=-1;for(let e=0;e<n.ulist.length;e++)if(n.ulist[e].uuid==a.val.uuid){t=e;break}n.ulist.splice(t,1),n.recentlyLeftUser=a.val,e.vm.runtime.startHats("cloudlink_whenuserdisconnects")}}break;case"server_version":window.clearTimeout(n.handshakeTimeout),await o(a.val);break;case"client_ip":n.client_ip=a.val;break;case"motd":n.motd=a.val;break;default:return}a.hasOwnProperty("listener")&&n.listeners.current.includes(String(a.listener))&&(n.listeners.current.splice(n.listeners.current.indexOf(String(a.listener)),1),n.listeners.varStates[String(a.listener)]={hasNew:!0,varState:a,eventHatTick:!0})}}(t.data)},n.socket.onclose=function(e){switch(n.linkState.status){case 1:n.linkState.status=4,n.linkState.disconnectType=1;break;case 2:e.wasClean||n.linkState.isAttemptingGracefulDisconnect?(n.linkState.status=3,n.linkState.disconnectType=0):(n.linkState.status=4,n.linkState.disconnectType=2)}window.clearTimeout(n.handshakeTimeout),n.handshakeAttempted=!1,n.socket=null,n.motd="",n.client_ip="",n.server_version="",n.linkState.identifiedProtocol=0,n.linkState.isAttemptingGracefulDisconnect=!1,n.myUserObject={},n.gmsg={queue:[],varState:"",hasNew:!1,eventHatTick:!1},n.pmsg={queue:[],varState:"",hasNew:!1,eventHatTick:!1},n.gvar={queue:[],varStates:{},eventHatTick:!1},n.pvar={queue:[],varStates:{},eventHatTick:!1},n.direct={queue:[],varState:"",hasNew:!1,eventHatTick:!1},n.statuscode={queue:[],varState:"",hasNew:!1,eventHatTick:!1},n.ulist=[],n.listeners={enablerState:!1,enablerValue:"",current:[],varStates:{}},n.rooms={enablerState:!1,enablerValue:"",isLinked:!1,isAttemptingLink:!1,isAttemptingUnlink:!1,current:[],varStates:{}},n.username={attempted:!1,accepted:!1,temp:"",value:""},a.startHats("cloudlink_onClose")}}}try{e.fetch("https://raw.githubusercontent.com/MikeDev101/cloudlink/master/serverlist.json").then((e=>e.text())).then((e=>{n.serverList=JSON.parse(e)})).catch((e=>{n.serverList={}}))}catch(e){n.serverList={}}e.extensions.register(new class{getInfo(){return{id:"cloudlink",name:"CloudLink",docsURI:"https://github.com/MikeDev101/cloudlink/wiki/Scratch-Client",blocks:[{opcode:"returnGlobalData",blockType:e.BlockType.REPORTER,text:e.translate("global data")},{opcode:"returnPrivateData",blockType:e.BlockType.REPORTER,text:e.translate("private data")},{opcode:"returnDirectData",blockType:e.BlockType.REPORTER,text:e.translate("direct data")},"---",{opcode:"returnLinkData",blockType:e.BlockType.REPORTER,text:e.translate("link status")},{opcode:"returnStatusCode",blockType:e.BlockType.REPORTER,text:e.translate("status code")},"---",{opcode:"returnUserListData",blockType:e.BlockType.REPORTER,text:e.translate("usernames")},{opcode:"returnUsernameDataNew",blockType:e.BlockType.REPORTER,text:e.translate("my username")},{opcode:"returnUsernameData",blockType:e.BlockType.REPORTER,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("(OLD - DO NOT USE IN NEW PROJECTS) my username")},"---",{opcode:"returnVersionData",blockType:e.BlockType.REPORTER,text:e.translate("extension version")},{opcode:"returnServerVersion",blockType:e.BlockType.REPORTER,text:e.translate("server version")},{opcode:"returnServerList",blockType:e.BlockType.REPORTER,text:e.translate("server list")},{opcode:"returnMOTD",blockType:e.BlockType.REPORTER,text:e.translate("server MOTD")},"---",{opcode:"returnClientIP",blockType:e.BlockType.REPORTER,text:e.translate("my IP address")},{opcode:"returnUserObject",blockType:e.BlockType.REPORTER,text:e.translate("my user object")},"---",{opcode:"returnListenerData",blockType:e.BlockType.REPORTER,text:e.translate("response for listener [ID]"),arguments:{ID:{type:e.ArgumentType.STRING,defaultValue:"example-listener"}}},{opcode:"readQueueSize",blockType:e.BlockType.REPORTER,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("size of queue for [TYPE]"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"allmenu",defaultValue:"All data"}}},{opcode:"readQueueData",blockType:e.BlockType.REPORTER,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("packet queue for [TYPE]"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"allmenu",defaultValue:"All data"}}},"---",{opcode:"returnVarData",blockType:e.BlockType.REPORTER,text:e.translate("[TYPE] [VAR] data"),arguments:{VAR:{type:e.ArgumentType.STRING,defaultValue:e.translate("Apple")},TYPE:{type:e.ArgumentType.STRING,menu:"varmenu",defaultValue:"Global variables"}}},"---",{opcode:"parseJSON",blockType:e.BlockType.REPORTER,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("[PATH] of [JSON_STRING]"),arguments:{PATH:{type:e.ArgumentType.STRING,defaultValue:"fruit/apples"},JSON_STRING:{type:e.ArgumentType.STRING,defaultValue:'{"fruit": {"apples": 2, "bananas": 3}, "total_fruit": 5}'}}},{opcode:"getFromJSONArray",blockType:e.BlockType.REPORTER,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("[NUM] from JSON array [ARRAY]"),arguments:{NUM:{type:e.ArgumentType.NUMBER,defaultValue:0},ARRAY:{type:e.ArgumentType.STRING,defaultValue:'["foo","bar"]'}}},{opcode:"makeJSON",blockType:e.BlockType.REPORTER,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("convert [toBeJSONified] to JSON"),arguments:{toBeJSONified:{type:e.ArgumentType.STRING,defaultValue:'{"test": true}'}}},{opcode:"isValidJSON",blockType:e.BlockType.BOOLEAN,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("is [JSON_STRING] valid JSON?"),arguments:{JSON_STRING:{type:e.ArgumentType.STRING,defaultValue:'{"fruit": {"apples": 2, "bananas": 3}, "total_fruit": 5}'}}},"---",{opcode:"fetchURL",blockType:e.BlockType.REPORTER,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("fetch data from URL [url]"),arguments:{url:{type:e.ArgumentType.STRING,defaultValue:"https://extensions.turbowarp.org/hello.txt"}}},{opcode:"requestURL",blockType:e.BlockType.REPORTER,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("send request with method [method] for URL [url] with data [data] and headers [headers]"),arguments:{method:{type:e.ArgumentType.STRING,defaultValue:"GET"},url:{type:e.ArgumentType.STRING,defaultValue:"https://extensions.turbowarp.org/hello.txt"},data:{type:e.ArgumentType.STRING,defaultValue:"{}"},headers:{type:e.ArgumentType.STRING,defaultValue:"{}"}}},"---",{opcode:"onConnect",blockType:e.BlockType.EVENT,text:e.translate("when connected"),isEdgeActivated:!1},{opcode:"onClose",blockType:e.BlockType.EVENT,text:e.translate("when disconnected"),isEdgeActivated:!1},"---",{opcode:"onListener",blockType:e.BlockType.HAT,text:e.translate("when I receive new message with listener [ID]"),isEdgeActivated:!0,arguments:{ID:{type:e.ArgumentType.STRING,defaultValue:"example-listener"}}},{opcode:"onNewPacket",blockType:e.BlockType.HAT,text:e.translate("when I receive new [TYPE] message"),isEdgeActivated:!0,arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"almostallmenu",defaultValue:"Global data"}}},{opcode:"onNewVar",blockType:e.BlockType.HAT,text:e.translate("When I receive new [TYPE] data for [VAR]"),isEdgeActivated:!0,arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"varmenu",defaultValue:"Global variables"},VAR:{type:e.ArgumentType.STRING,defaultValue:e.translate("Apple")}}},"---",{opcode:"getComState",blockType:e.BlockType.BOOLEAN,text:e.translate("connected?")},{opcode:"getRoomState",blockType:e.BlockType.BOOLEAN,text:e.translate("linked to rooms?")},{opcode:"getComLostConnectionState",blockType:e.BlockType.BOOLEAN,text:e.translate("lost connection?")},{opcode:"getComFailedConnectionState",blockType:e.BlockType.BOOLEAN,text:e.translate("failed to connnect?")},{opcode:"getUsernameState",blockType:e.BlockType.BOOLEAN,text:e.translate("username synced?")},{opcode:"returnIsNewData",blockType:e.BlockType.BOOLEAN,text:e.translate("got new [TYPE]?"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"datamenu",defaultValue:"Global data"}}},{opcode:"returnIsNewVarData",blockType:e.BlockType.BOOLEAN,text:e.translate("got new [TYPE] data for variable [VAR]?"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"varmenu",defaultValue:"Global variables"},VAR:{type:e.ArgumentType.STRING,defaultValue:e.translate("Apple")}}},{opcode:"returnIsNewListener",blockType:e.BlockType.BOOLEAN,text:e.translate("got new packet with listener [ID]?"),arguments:{ID:{type:e.ArgumentType.STRING,defaultValue:"example-listener"}}},{opcode:"checkForID",blockType:e.BlockType.BOOLEAN,text:e.translate("ID [ID] connected?"),arguments:{ID:{type:e.ArgumentType.STRING,defaultValue:e.translate("Another name")}}},"---",{opcode:"openSocket",blockType:e.BlockType.COMMAND,text:e.translate("connect to [IP]"),arguments:{IP:{type:e.ArgumentType.STRING,defaultValue:"ws://127.0.0.1:3000/"}}},{opcode:"openSocketPublicServers",blockType:e.BlockType.COMMAND,text:e.translate("connect to server [ID]"),arguments:{ID:{type:e.ArgumentType.NUMBER,defaultValue:1}}},{opcode:"closeSocket",blockType:e.BlockType.COMMAND,text:e.translate("disconnect")},"---",{opcode:"setMyName",blockType:e.BlockType.COMMAND,text:e.translate("set [NAME] as username"),arguments:{NAME:{type:e.ArgumentType.STRING,defaultValue:e.translate("A name")}}},"---",{opcode:"createListener",blockType:e.BlockType.COMMAND,text:e.translate("attach listener [ID] to next packet"),arguments:{ID:{type:e.ArgumentType.STRING,defaultValue:"example-listener"}}},"---",{opcode:"linkToRooms",blockType:e.BlockType.COMMAND,text:e.translate("link to room(s) [ROOMS]"),arguments:{ROOMS:{type:e.ArgumentType.STRING,defaultValue:e.translate('["test"]')}}},{opcode:"selectRoomsInNextPacket",blockType:e.BlockType.COMMAND,text:e.translate("select room(s) [ROOMS] for next packet"),arguments:{ROOMS:{type:e.ArgumentType.STRING,defaultValue:e.translate('["test"]')}}},{opcode:"unlinkFromRooms",blockType:e.BlockType.COMMAND,text:e.translate("unlink from all rooms")},"---",{opcode:"sendGData",blockType:e.BlockType.COMMAND,text:e.translate("send [DATA]"),arguments:{DATA:{type:e.ArgumentType.STRING,defaultValue:e.translate("Apple")}}},{opcode:"sendPData",blockType:e.BlockType.COMMAND,text:e.translate("send [DATA] to [ID]"),arguments:{DATA:{type:e.ArgumentType.STRING,defaultValue:e.translate("Apple")},ID:{type:e.ArgumentType.STRING,defaultValue:e.translate("Another name")}}},{opcode:"sendGDataAsVar",blockType:e.BlockType.COMMAND,text:e.translate("send variable [VAR] with data [DATA]"),arguments:{DATA:{type:e.ArgumentType.STRING,defaultValue:e.translate("Banana")},VAR:{type:e.ArgumentType.STRING,defaultValue:e.translate("Apple")}}},{opcode:"sendPDataAsVar",blockType:e.BlockType.COMMAND,text:e.translate("send variable [VAR] to [ID] with data [DATA]"),arguments:{DATA:{type:e.ArgumentType.STRING,defaultValue:e.translate("Banana")},ID:{type:e.ArgumentType.STRING,defaultValue:e.translate("Another name")},VAR:{type:e.ArgumentType.STRING,defaultValue:e.translate("Apple")}}},"---",{opcode:"runCMDnoID",blockType:e.BlockType.COMMAND,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("send command without ID [CMD] [DATA]"),arguments:{CMD:{type:e.ArgumentType.STRING,defaultValue:e.translate("direct")},DATA:{type:e.ArgumentType.STRING,defaultValue:e.translate("val")}}},{opcode:"runCMD",blockType:e.BlockType.COMMAND,hideFromPalette:n.hideCLDeprecatedBlocks,text:e.translate("send command [CMD] [ID] [DATA]"),arguments:{CMD:{type:e.ArgumentType.STRING,defaultValue:e.translate("direct")},ID:{type:e.ArgumentType.STRING,defaultValue:e.translate("id")},DATA:{type:e.ArgumentType.STRING,defaultValue:e.translate("val")}}},"---",{opcode:"resetNewData",blockType:e.BlockType.COMMAND,text:e.translate("reset got new [TYPE] status"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"datamenu",defaultValue:"Global data"}}},{opcode:"resetNewVarData",blockType:e.BlockType.COMMAND,text:e.translate("reset got new [TYPE] [VAR] status"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"varmenu",defaultValue:"Global variables"},VAR:{type:e.ArgumentType.STRING,defaultValue:e.translate("Apple")}}},"---",{opcode:"resetNewListener",blockType:e.BlockType.COMMAND,text:e.translate("reset got new [ID] listener status"),arguments:{ID:{type:e.ArgumentType.STRING,defaultValue:"example-listener"}}},"---",{opcode:"getNextPacket",blockType:e.BlockType.REPORTER,text:e.translate("pop next packet for [TYPE]"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"allmenu",defaultValue:"All data"}}},{opcode:"newPacketsExist",blockType:e.BlockType.BOOLEAN,text:e.translate("new packets exist for [TYPE]"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"allmenu",defaultValue:"All data"}}},{opcode:"getAndClearPacketQueue",blockType:e.BlockType.REPORTER,text:e.translate("pop all packets for [TYPE]"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"allmenu",defaultValue:"All data"}}},"---",{opcode:"clearAllPackets",blockType:e.BlockType.COMMAND,text:e.translate("clear all packets for [TYPE]"),arguments:{TYPE:{type:e.ArgumentType.STRING,menu:"allmenu",defaultValue:"All data"}}},{opcode:"whenuserdisconnects",blockType:e.BlockType.EVENT,text:e.translate("when any user disconnects"),isEdgeActivated:!1},{opcode:"whenuserconnects",blockType:e.BlockType.EVENT,text:e.translate("when any user connects"),isEdgeActivated:!1},{opcode:"recentlyjoined",blockType:e.BlockType.REPORTER,text:e.translate("recently joined user")},{opcode:"recentlyleft",blockType:e.BlockType.REPORTER,text:e.translate("recently left user")},"---",{func:"showOldBlocks",blockType:e.BlockType.BUTTON,text:e.translate("Show old blocks"),hideFromPalette:!n.hideCLDeprecatedBlocks},{func:"hideOldBlocks",blockType:e.BlockType.BUTTON,text:e.translate("Hide old blocks"),hideFromPalette:n.hideCLDeprecatedBlocks},"---"],menus:{datamenu:{items:[{text:e.translate("Global data"),value:"Global data"},{text:e.translate("Private data"),value:"Private data"},{text:e.translate("Direct data"),value:"Direct data"},{text:e.translate("Status code"),value:"Status code"}]},varmenu:{items:[{text:e.translate("Global variables"),value:"Global variables"},{text:e.translate("Private variables"),value:"Private variables"}]},allmenu:{items:[{text:e.translate("Global data"),value:"Global data"},{text:e.translate("Private data"),value:"Private data"},{text:e.translate("Direct data"),value:"Direct data"},{text:e.translate("Status code"),value:"Status code"},{text:e.translate("Global variables"),value:"Global variables"},{text:e.translate("Private variables"),value:"Private variables"},{text:e.translate("All data"),value:"All data"}]},almostallmenu:{items:[{text:e.translate("Global data"),value:"Global data"},{text:e.translate("Private data"),value:"Private data"},{text:e.translate("Direct data"),value:"Direct data"},{text:e.translate("Status code"),value:"Status code"},{text:e.translate("Global variables"),value:"Global variables"},{text:e.translate("Private variables"),value:"Private variables"}]}}}}showOldBlocks(){confirm("Do you want to display old blocks?\n\nThese blocks are not recommended for use in newer CloudLink projects as they are deprecated or have better implementation in other extensions.")&&(n.hideCLDeprecatedBlocks=!1,t.extensionManager.refreshBlocks())}hideOldBlocks(){n.hideCLDeprecatedBlocks=!0,t.extensionManager.refreshBlocks()}returnGlobalData(){return s(n.gmsg.varState)}returnPrivateData(){return s(n.pmsg.varState)}returnDirectData(){return s(n.direct.varState)}returnLinkData(){return s(n.linkState.status)}returnStatusCode(){return s(n.statuscode.varState)}returnUserListData(){return s(n.ulist)}returnUsernameDataNew(){return s(n.username.value)}returnUsernameData(){return s(n.myUserObject)}returnUserObject(){return s(n.myUserObject)}returnVersionData(){return`${r.editorType} ${r.versionString}`}returnServerVersion(){return s(n.server_version)}returnServerList(){return s(n.serverList)}returnMOTD(){return s(n.motd)}returnClientIP(){return s(n.client_ip)}returnListenerData(e){return n.listeners.varStates.hasOwnProperty(String(e.ID))?n.listeners.varStates[String(e.ID)].varState:""}getNextPacket(e){let t="";switch(e.TYPE){case"Global data":t=n.gmsg.queue[0],n.gmsg.queue.shift();break;case"Private data":t=n.pmsg.queue[0],n.pmsg.queue.shift();break;case"Direct data":t=n.direct.queue[0],n.direct.queue.shift();break;case"Status code":t=n.statuscode.queue[0],n.statuscode.queue.shift();break;case"Global variables":t=n.gvar.queue[0],n.gvar.queue.shift();break;case"Private variables":t=n.pvar.queue[0],n.pvar.queue.shift()}return s(JSON.stringify(t))}getAndClearPacketQueue(e){let t="";switch(e.TYPE){case"Global data":t=n.gmsg.queue,n.gmsg.queue=[];break;case"Private data":t=n.pmsg.queue,n.pmsg.queue=[];break;case"Direct data":t=n.direct.queue,n.direct.queue=[];break;case"Status code":t=n.statuscode.queue,n.statuscode.queue=[];break;case"Global variables":t=n.gvar.queue,n.gvar.queue=[];break;case"Private variables":t=n.pvar.queue,n.pvar.queue=[]}return s(JSON.stringify(t))}newPacketsExist(e){switch(e.TYPE){case"Global data":return n.gmsg.queue.length>0;case"Private data":return n.pmsg.queue.length>0;case"Direct data":return n.direct.queue.length>0;case"Status code":return n.statuscode.queue.length>0;case"Global variables":return n.gvar.queue.length>0;case"Private variables":return n.pvar.queue.length>0}}readQueueSize(e){switch(e.TYPE){case"Global data":return n.gmsg.queue.length;case"Private data":return n.pmsg.queue.length;case"Direct data":return n.direct.queue.length;case"Status code":return n.statuscode.queue.length;case"Global variables":return n.gvar.queue.length;case"Private variables":return n.pvar.queue.length;case"All data":return n.gmsg.queue.length+n.pmsg.queue.length+n.direct.queue.length+n.statuscode.queue.length+n.gvar.queue.length+n.pvar.queue.length}}readQueueData(e){switch(e.TYPE){case"Global data":return s(n.gmsg.queue);case"Private data":return s(n.pmsg.queue);case"Direct data":return s(n.direct.queue);case"Status code":return s(n.statuscode.queue);case"Global variables":return s(n.gvar.queue);case"Private variables":return s(n.pvar.queue);case"All data":return s({gmsg:n.gmsg.queue,pmsg:n.pmsg.queue,direct:n.direct.queue,statuscode:n.statuscode.queue,gvar:n.gvar.queue,pvar:n.pvar.queue})}}returnVarData(e){switch(e.TYPE){case"Global variables":return n.gvar.varStates.hasOwnProperty(String(e.VAR))?n.gvar.varStates[String(e.VAR)].varState:"";case"Private variables":return n.pvar.varStates.hasOwnProperty(String(e.VAR))?n.pvar.varStates[String(e.VAR)].varState:""}}parseJSON(e){try{const t=e.PATH.toString().split("/").map((e=>decodeURIComponent(e)));let a;""===t[0]&&t.splice(0,1),""===t[t.length-1]&&t.splice(-1,1);try{a=JSON.parse(" "+e.JSON_STRING)}catch(e){return e.message}return t.forEach((e=>a=a[e])),null===a?"null":void 0===a?"":"object"==typeof a?JSON.stringify(a):a.toString()}catch(e){return""}}getFromJSONArray(e){var t=JSON.parse(e.ARRAY);if("undefined"==t[e.NUM])return"";{let a=t[e.NUM];return"object"==typeof a&&(a=JSON.stringify(a)),a}}fetchURL(t){return e.fetch(t.url,{method:"GET"}).then((e=>e.text())).catch((e=>{}))}requestURL(t){return"GET"==t.method||"HEAD"==t.method?e.fetch(t.url,{method:t.method,headers:JSON.parse(t.headers)}).then((e=>e.text())).catch((e=>{})):e.fetch(t.url,{method:t.method,headers:JSON.parse(t.headers),body:t.data}).then((e=>e.text())).catch((e=>{}))}onListener(e){return null!=n.socket&&(2==n.linkState.status&&(!!n.listeners.varStates.hasOwnProperty(e.ID)&&(!!n.listeners.varStates[e.ID].eventHatTick&&(n.listeners.varStates[e.ID].eventHatTick=!1,!0))))}onNewPacket(e){if(null==n.socket)return!1;if(2!=n.linkState.status)return!1;switch(e.TYPE){case"Global data":if(n.gmsg.eventHatTick)return n.gmsg.eventHatTick=!1,!0;break;case"Private data":if(n.pmsg.eventHatTick)return n.pmsg.eventHatTick=!1,!0;break;case"Direct data":if(n.direct.eventHatTick)return n.direct.eventHatTick=!1,!0;break;case"Status code":if(n.statuscode.eventHatTick)return n.statuscode.eventHatTick=!1,!0;break;case"Global variables":if(n.gvar.eventHatTick)return n.gvar.eventHatTick=!1,!0;break;case"Private variables":if(n.pvar.eventHatTick)return n.pvar.eventHatTick=!1,!0}return!1}onNewVar(e){if(null==n.socket)return!1;if(2!=n.linkState.status)return!1;switch(e.TYPE){case"Global variables":if(!n.gvar.varStates.hasOwnProperty(String(e.VAR)))break;if(n.gvar.varStates[String(e.VAR)].eventHatTick)return n.gvar.varStates[String(e.VAR)].eventHatTick=!1,!0;break;case"Private variables":if(!n.pvar.varStates.hasOwnProperty(String(e.VAR)))break;if(n.pvar.varStates[String(e.VAR)].eventHatTick)return n.pvar.varStates[String(e.VAR)].eventHatTick=!1,!0}return!1}makeJSON(e){if("string"!=typeof e.toBeJSONified)return"object"==typeof e.toBeJSONified?JSON.stringify(e.toBeJSONified):"Not JSON!";try{return JSON.parse(e.toBeJSONified),String(e.toBeJSONified)}catch(e){return"Not JSON!"}}getComState(){return 2==n.linkState.status&&null!=n.socket}getRoomState(){return null!=n.socket&&n.rooms.isLinked}getComLostConnectionState(){return 4==n.linkState.status&&2==n.linkState.disconnectType}getComFailedConnectionState(){return 4==n.linkState.status&&1==n.linkState.disconnectType}getUsernameState(){return null!=n.socket&&n.username.accepted}returnIsNewData(e){if(null==n.socket)return!1;switch(e.TYPE){case"Global data":return n.gmsg.hasNew;case"Private data":return n.pmsg.hasNew;case"Direct data":return n.direct.hasNew;case"Status code":return n.statuscode.hasNew}}returnIsNewVarData(e){switch(e.TYPE){case"Global variables":return!!n.gvar.varStates.hasOwnProperty(String(e.VAR))&&n.gvar.varStates[String(e.ID)].hasNew;case"Private variables":return!!n.pvar.varStates.hasOwnProperty(String(e.VAR))&&n.pvar.varStates[String(e.ID)].hasNew}}returnIsNewListener(e){return!!n.listeners.varStates.hasOwnProperty(String(e.ID))&&n.listeners.varStates[String(e.ID)].hasNew}checkForID(e){return!!n.ulist.includes(e.ID)||n.linkState.identifiedProtocol>2&&(this.isValidJSON(e.ID)?n.ulist.some((t=>t.username===JSON.parse(e.ID).username&&t.id==JSON.parse(e.ID).id)):n.ulist.some((t=>t.username===String(e.ID)||t.id==e.ID)))}isValidJSON(e){try{return JSON.parse(e.JSON_STRING),!0}catch{return!1}}openSocket(e){if(null==n.socket)return i(e.IP)}openSocketPublicServers(e){if(null==n.socket&&n.serverList.hasOwnProperty(String(e.ID)))return i(n.serverList[String(e.ID)].url)}closeSocket(){null!=n.socket&&(n.linkState.isAttemptingGracefulDisconnect=!0,n.socket.close(1e3,"Client going away"))}setMyName(e){null!=n.socket&&(n.username.attempted||n.username.accepted||(n.username.attempted=!0,n.username.temp=e.NAME,l({cmd:"setid",val:e.NAME,listener:"username_cfg"})))}createListener(e){null!=n.socket&&(n.linkState.identifiedProtocol<2||n.username.accepted&&(n.listeners.enablerState||(n.listeners.enablerState=!0,n.listeners.enablerValue=e.ID)))}linkToRooms(e){null!=n.socket&&(n.linkState.identifiedProtocol<2||n.username.accepted&&(n.rooms.isLinked||n.rooms.isAttemptingLink||(n.rooms.isAttemptingLink=!0,l({cmd:"link",val:e.ROOMS,listener:"link"}))))}selectRoomsInNextPacket(e){null!=n.socket&&(n.linkState.identifiedProtocol<2||n.username.accepted&&(n.rooms.enablerState||n.rooms.isLinked&&(n.rooms.enablerState=!0,n.rooms.enablerValue=e.ROOMS)))}unlinkFromRooms(){null!=n.socket&&(n.linkState.identifiedProtocol<2||n.username.accepted&&n.rooms.isLinked&&(n.rooms.isAttemptingUnlink||(n.rooms.isAttemptingUnlink=!0,l({cmd:"unlink",val:"",listener:"unlink"}))))}sendGData(e){null!=n.socket&&l({cmd:"gmsg",val:e.DATA})}sendPData(e){null!=n.socket&&n.username.accepted&&l({cmd:"pmsg",val:e.DATA,id:e.ID})}sendGDataAsVar(e){null!=n.socket&&l({cmd:"gvar",val:e.DATA,name:e.VAR})}sendPDataAsVar(e){null!=n.socket&&n.username.accepted&&l({cmd:"pvar",val:e.DATA,name:e.VAR,id:e.ID})}runCMDnoID(e){null!=n.socket&&l({cmd:e.CMD,val:e.DATA})}runCMD(e){null!=n.socket&&n.username.accepted&&l({cmd:e.CMD,val:e.DATA,id:e.ID})}resetNewData(e){switch(e.TYPE){case"Global data":n.gmsg.hasNew=!1;break;case"Private data":n.pmsg.hasNew=!1;break;case"Direct data":n.direct.hasNew=!1;break;case"Status code":n.statuscode.hasNew=!1}}resetNewVarData(e){switch(e.TYPE){case"Global variables":if(!n.gvar.varStates.hasOwnProperty(String(e.VAR)))return;n.gvar.varStates[String(e.ID)].hasNew=!1;case"Private variables":if(!n.pvar.varStates.hasOwnProperty(String(e.VAR)))return!1;n.pvar.varStates[String(e.ID)].hasNew=!1}}resetNewListener(e){n.listeners.varStates.hasOwnProperty(String(e.ID))&&(n.listeners.varStates[String(e.ID)].hasNew=!1)}clearAllPackets(e){switch(e.TYPE){case"Global data":n.gmsg.queue=[];break;case"Private data":n.pmsg.queue=[];break;case"Direct data":n.direct.queue=[];break;case"Status code":n.statuscode.queue=[];break;case"Global variables":n.gvar.queue=[];break;case"Private variables":n.pvar.queue=[];break;case"All data":n.gmsg.queue=[],n.pmsg.queue=[],n.direct.queue=[],n.statuscode.queue=[],n.gvar.queue=[],n.pvar.queue=[]}}recentlyjoined(){return s(JSON.stringify(n?.recentlyJoinedUser??{}))}recentlyleft(){return s(JSON.stringify(n?.recentlyLeftUser??{}))}})}(Scratch);
