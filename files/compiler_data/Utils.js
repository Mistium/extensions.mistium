extension = {
  id: "mistsutils",
  color1: "#2DA4A0",
  name: "Mists Utils",
};

blocks = [
  {
    opcode: "notequals",
    func: "err",
    text: "[A] !== [B]",
    blockType: "BOOLEAN",
    code: '((""+([A])) !== (""+([B])))',
    returns: "BOOLEAN",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "apple" },
    },
  },
  {
    opcode: "equals",
    func: "err",
    text: "[A] === [B]",
    code: '((""+([A])) === (""+([B])))',
    blockType: "BOOLEAN",
    returns: "BOOLEAN",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "apple" },
    },
  },
  {
    opcode: "compare",
    func: "err",
    text: "[A] [C] [B]",
    blockType: "BOOLEAN",
    code: '(""+([A])) [B] (""+([C]))',
    returns: "BOOLEAN",
    arguments: {
      A: { type: "NUMBER", defaultValue: 3 },
      B: { type: "NUMBER", defaultValue: 4 },
      C: { type: "STRING", defaultValue: "<" },
    },
  },
  {
    opcode: "power",
    func: "err",
    text: "[A] ^ [B]",
    blockType: "REPORTER",
    code: "Math.pow([A], [B])",
    returns: "NUMBER",
    arguments: {
      A: { type: "NUMBER", defaultValue: 3 },
      B: { type: "NUMBER", defaultValue: 4 },
    },
  },
  "---",
  {
    opcode: "clamp",
    func: "err",
    text: "clamp [A] between [B] and [C]",
    blockType: "REPORTER",
    code: "Math.min(Math.max([A], [B]), [C])",
    returns: "NUMBER",
    arguments: {
      A: { type: "NUMBER", defaultValue: 100 },
      B: { type: "NUMBER", defaultValue: 1 },
      C: { type: "NUMBER", defaultValue: 50 },
    },
  },
  {
    opcode: "letters",
    func: "err",
    text: "letters [A] to [B] of [C]",
    blockType: "REPORTER",
    code: '(""+([C])).substring([A], [B])',
    returns: "STRING",
    arguments: {
      A: { type: "NUMBER", defaultValue: 2 },
      B: { type: "NUMBER", defaultValue: 4 },
      C: { type: "STRING", defaultValue: "apple" },
    },
  },
  "---",
  {
    opcode: "starts",
    func: "err",
    text: "[A] starts with [B]",
    blockType: "BOOLEAN",
    code: '(""+([A])).startsWith(""+([B]))',
    returns: "BOOLEAN",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "app" },
    },
  },
  {
    opcode: "ends",
    func: "err",
    text: "[A] ends with [B]",
    blockType: "BOOLEAN",
    code: '(""+([A])).endsWith(""+([B]))',
    returns: "BOOLEAN",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "app" },
    },
  },
  {
    opcode: "toUnicode",
    func: "err",
    text: "Unicode Of [A]",
    blockType: "REPORTER",
    code: '(""+([A])).charCodeAt(0)',
    returns: "NUMBER",
    arguments: {
      A: { type: "STRING", defaultValue: "A" },
    },
  },
  {
    opcode: "replace",
    func: "err",
    text: "replace [C] in [A] with [B]",
    blockType: "REPORTER",
    code: '(""+([A])).replace(""+([C]), ""+([B]))',
    returns: "STRING",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "l" },
      C: { type: "STRING", defaultValue: "p" },
    },
    hideFromPalette: true,
  },
  "---",
  {
    opcode: "split",
    func: "err",
    text: "split [A] by [B] (stringify)",
    blockType: "REPORTER",
    code: 'JSON.stringify((""+([A])).split(""+([B])))',
    returns: "STRING",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "l" },
    },
  },
  {
    opcode: "splitarray",
    func: "err",
    text: "split [A] by [B] (array)",
    blockType: "REPORTER",
    code: '(""+([A])).split(""+([B]))',
    returns: "STRING",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "l" },
    },
  },
  {
    opcode: "length",
    func: "err",
    text: "[A].length",
    blockType: "REPORTER",
    code: "(([A]).length)",
    returns: "NUMBER",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
    },
  },
  {
    opcode: "item",
    func: "err",
    text: "item [C] of [A] split by [B]",
    blockType: "REPORTER",
    code: '(""+([A])).split(""+([B]))[[C]]',
    returns: "STRING",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "l" },
      C: { type: "NUMBER", defaultValue: 1 },
    },
  },
  {
    opcode: "jsondelete",
    func: "err",
    text: "Delete Item [B] of [A]",
    code: "delete [A][[B]]",
    blockType: "COMMAND",
    arguments: {
      A: { type: "STRING", defaultValue: "" },
      B: { type: "STRING", defaultValue: "0" },
    },
  },
  {
    opcode: "jsonset",
    func: "err",
    text: "Set [B] to [C] in [A]",
    blockType: "COMMAND",
    code: "[A][[B]] = [C]",
    arguments: {
      A: { type: "STRING", defaultValue: "" },
      B: { type: "STRING", defaultValue: "0" },
      C: { type: "STRING", defaultValue: '"hello world"' },
    },
  },
  {
    opcode: "squarebrackets",
    func: "err",
    text: "[A] item [B]",
    blockType: "REPORTER",
    code: "([A])[[B]]",
    returns: "STRING",
    arguments: {
      A: { type: "STRING", defaultValue: "apple" },
      B: { type: "STRING", defaultValue: "1" },
    },
  },
  {
    opcode: "jsonparse",
    func: "err",
    text: "JSON.parse [A]",
    blockType: "REPORTER",
    code: "JSON.parse([A])",
    returns: "STRING",
    arguments: {
      A: { type: "STRING", defaultValue: '{"a": 1}' },
    },
  },
  {
    opcode: "jsonstringify",
    func: "err",
    text: "JSON.stringify [A]",
    blockType: "REPORTER",
    code: "JSON.stringify([A])",
    returns: "STRING",
    arguments: {
      A: { type: "STRING", defaultValue: "" },
    },
  },
  "---",
  {
    opcode: "patchreporter",
    func: "err",
    text: "Patch [A]",
    blockType: "REPORTER",
    code: "[A]",
    returns: "STRING",
    arguments: {
      A: { type: "STRING", as: "RAW", defaultValue: "apple" },
    },
    allowDropAnywhere: true,
  },
  {
    opcode: "patchreporter2",
    func: "err",
    text: "Patch [A][B]",
    blockType: "REPORTER",
    code: "[A][B]",
    returns: "STRING",
    arguments: {
      A: { type: "STRING", as: "RAW", defaultValue: "apple" },
      B: { type: "STRING", as: "RAW", defaultValue: "1" },
    },
    allowDropAnywhere: true,
  },
  {
    opcode: "patchreporter3",
    func: "err",
    text: "Patch [A][B][C]",
    blockType: "REPORTER",
    code: "[A][B][C]",
    returns: "STRING",
    arguments: {
      A: { type: "STRING", as: "RAW", defaultValue: "return" },
      B: { type: "STRING", as: "RAW", defaultValue: '""' },
      C: { type: "STRING", as: "RAW", defaultValue: ";" },
    },
    allowDropAnywhere: true,
  },
  {
    opcode: "patchboolean",
    func: "err",
    text: "Patch [A]",
    blockType: "BOOLEAN",
    code: "[A]",
    returns: "BOOLEAN",
    arguments: {
      A: { type: "STRING", as: "RAW", defaultValue: "apple" },
    },
  },
  {
    opcode: "patchcommand",
    func: "err",
    text: "Patch [A]",
    blockType: "COMMAND",
    code: "[A]",
    arguments: {
      A: { type: "STRING", as: "RAW", defaultValue: "apple" },
    },
  },
  {
    opcode: "patchcommand2",
    func: "err",
    text: "Patch [A][B]",
    blockType: "COMMAND",
    code: "[A][B]",
    arguments: {
      A: { type: "STRING", as: "RAW", defaultValue: "apple" },
      B: { type: "STRING", as: "RAW", defaultValue: "1" },
    },
  },
  {
    opcode: "patchcommand3",
    func: "err",
    text: "Patch [A][B][C]",
    blockType: "COMMAND",
    code: "[A][B][C]",
    arguments: {
      A: { type: "STRING", as: "RAW", defaultValue: "return" },
      B: { type: "STRING", as: "RAW", defaultValue: '""' },
      C: { type: "STRING", as: "RAW", defaultValue: ";" },
    },
  },
  "---",
  {
    opcode: "true",
    func: "err",
    text: "true",
    blockType: "BOOLEAN",
    code: true,
    returns: "BOOLEAN",
    disableMonitor: true,
  },
  {
    opcode: "false",
    func: "err",
    text: "false",
    blockType: "BOOLEAN",
    code: false,
    returns: "BOOLEAN",
    disableMonitor: true,
  },
  {
    opcode: "performancenow",
    func: "err",
    text: "performance.now()",
    blockType: "REPORTER",
    code: "performance.now()",
    returns: "NUMBER",
    disableMonitor: true,
  },
  {
    opcode: "stagewidth",
    func: "err",
    text: "Stage Width",
    blockType: "REPORTER",
    code: "Scratch.vm.runtime.stageWidth",
    returns: "NUMBER",
    disableMonitor: true,
  },
  {
    opcode: "stageheight",
    func: "err",
    text: "Stage Height",
    blockType: "REPORTER",
    code: "Scratch.vm.runtime.stageHeight",
    returns: "NUMBER",
    disableMonitor: true,
  },
];
